# removed species listed by trait database but not listed by IUCN
# nrow = 4804
# create empty dataframe to match trait database columns
IUCN_empty <- data.frame(matrix(NA, nrow = nrow(IUCN), ncol = ncol(trait_database)))
colnames(IUCN_empty) <- colnames(trait_database)
IUCN_empty$binomial <- IUCN$binomial
# combine trait database with empty values for species listed by the IUCN but not listed by trait database
trait_out_final <- rbind(trait, IUCN_empty)
## Find and try synonyms for trait data ##
spp <- IUCN$binomial[1:10] # species list to find synonyms for: species listed by IUCN1235 but not listed by trait database
syno <- synonyms(spp, db = "itis") # find synonyms - uses taxize package
no_syn <- which(is.na(syno) == TRUE); no_syn <- names(no_syn) # list those that have no synonyms
spp_syn <- setdiff(spp, no_syn) # remove species from species list that have no synonyms
syndf <- list.remove(syno, no_syn) # remove species data frames from synonym list that are empty - uses rlist package
Syn <- as.data.frame(data.table::rbindlist(syndf)) # collapse list of data frames for each species into new single data frame
seq_bi <- sapply(syndf, nrow) %>% unlist(seq_bi) # number of rows per species
seq_bi <- rep(spp_syn, times = as.vector(seq_bi)) # repeat species names with synonyms by seq_bi
Syn <- mutate(Syn, binomial = seq_bi)  # add sequence of species names to synonym data frame
acc_tsn1 <- ifelse(is.na(as.numeric(Syn$acc_tsn)), Syn$syn_name, Syn$acc_tsn) # swap accepted tsn with syn names where needed
Syn <- mutate(Syn, acc_tsn1 = acc_tsn1) # add edited acc_tsn column to data frame
syn_name1 <- ifelse(!is.na(as.numeric(Syn$syn_name)), Syn$acc_tsn, Syn$syn_name) # swap syn names with accepted tsn where needed
Syn <- mutate(Syn, syn_name1 = syn_name1) # add edited syn_name column to data frame
Syn <- Syn[c(5,1,6:7,4)] # reorder columns to move binomial from the end
# if else chained loop to split data in to first, second, third and fourth synonyms depending on the species with the most synonyms in data frame
if(max(as.vector(table(Syn$binomial))) == 1) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
} else {
if(max(as.vector(table(Syn$binomial))) == 2) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_2 <- Syn[duplicated(Syn$binomial),] # create data frame of second synonyms
} else {
if(max(as.vector(table(Syn$binomial))) == 3) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_T <- Syn[duplicated(Syn$binomial),] # create data frame of second synonyms
Syn_2 <- Syn_T[!duplicated(Syn_T$binomial),] # create temporary dataframe
Syn_3 <- Syn_T[duplicated(Syn_T$binomial),] # create data frame of third synonyms
rm(Syn_T)
} else {
if(max(as.vector(table(Syn$binomial))) == 4) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_T <- Syn[duplicated(Syn$binomial),] # create temporary dataframe
Syn_2 <- Syn_T[!duplicated(Syn_T$binomial),] # create data frame of second synonyms
Syn_T <- Syn_T[duplicated(Syn_T$binomial),] # create temporary dataframe
Syn_3 <- Syn_T[!duplicated(Syn_T$binomial),] # create data frame of third synonyms
Syn_4 <- Syn_T[duplicated(Syn_T$binomial),] # create data frame of fourth synonyms
rm(Syn_T)
}}}}
stats <- list(
trait_database = trait_database,
IUCN = IUCN,
trait_out = trait_out,
trait_out_final = trait_out_final)
return(stats)
} # end of trait function
trait_out <- trait(trait = pan, species = am1235u)
trait_out
trait_fun <- trait(trait = pan, species = am1235u)
trait_database <- trait_fun$trait_database
head(trait_database)
nrow(trait_database)
nrow(trait_out)
trait_out <- trait_fun$trait_out
trait_out_final <- trait_fun$trait_out_final
nrow(trait_out)
nrow(trait_out_final)
## Date: May 2016 -
## Outputs: PanTHERIA1235.csv, PanTHERIA12.csv, IUCN1235P.csv, IUCN12P.csv,
##          ALL_Mammals_1235_traits_PanTHERIA.csv, ALL_Mammals_12_traits_PanTHERIA.csv,
##          Amniote1235_M.csv, Amniote12_M.csv, IUCN1235A_M.csv, IUCN12A_M.csv,
##          ALL_Mammals_1235_traits_Amniote.csv, ALL_Mammals_12_traits_Amniote.csv,
##          Elton1235_M.csv, Elton12_M.csv, IUCN1235E_M.csv, IUCN12E_M.csv,
##          ALL_Mammals_1235_traits_Elton.csv, ALL_Mammals_12_traits_Elton.csv,
##          MDIET1235.csv, MDIET12.csv, IUCN1235M.csv, IUCN12M.csv,
##          ALL_Mammals_1235_traits_MammalDIET.csv, ALL_Mammals_12_traits_MammalDIET.csv
## -------------------------------------------------------------------------------------
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, taxize, data.table, rlist)
# dplyr: used to compare two data frames, combine species names # calls: anti_join, mutate
# taxize: used to find taxonomic synonyms and subspecies for taxonomic mismatches # calls: synonyms
# data.table: used to concantenate a list of data frames # calls: rbindlist
# rlist: used to remove data frames from a list of data frames # calls: list.remove
## Read in species unique lists
am12u <- read.csv("ALL_Mammals_1_2_unique.csv")
# All mammals for presence = extant; origin = native, reintroduced
# nrow = 5233
am1235u <- read.csv("ALL_Mammals_1_2_3_5_unique.csv")
# All mammals for presence = extant; origin = native, reintroduced, introduced, origin uncertain
# nrow = 5235
am12uT <- am1235u[am1235u$origin == 1 | am1235u$origin == 2,]
## SUBSET ALL MAMMALS BY ORIGIN FROM ORIGINAL EXCEL
## OR JUST CARRY ORIGIN THROUGH TO THE END AND THEN SUBSET
### Perform code for each trait data set: PanTHERIA, Amniote, EltonTraits, MammalDIET
######## PanTHERIA ##############
## read in PanTHERIA trait database
pan <- read.csv("PanTHERIA_1-0_WR05_Aug2008.csv")
# nrow = 5416
colnames(pan)[5] <- "binomial"
# set column MSW05_Binomial to binomial to match species tables
pan <- arrange(pan, binomial)
# order data by binomial A-Z
## 12 All mammals for presence = extant; origin = native, reintroduced ##
PanTHERIA12 <- anti_join(pan, am12u, by = "binomial") # Fine to ignore Warning message: In anti_join_impl(x, y, by$x, by$y) : joining factors with different levels, coercing to character vector
# Species listed by PanTHERIA but not listed by IUCN
# nrow = 614
IUCN12P <- anti_join(am12u, pan, by = "binomial")
# IUCN species not listed in PanTHERIA
# nrow = 431
pan12 <- pan[!(pan$binomial %in% c(as.vector(PanTHERIA12$binomial))),]
# removed species listed by PanTHERIA but not listed by IUCN
# nrow = 4802
# create empty dataframe to match trait database columns
IUCN_empty12P <- data.frame(matrix(NA, nrow = nrow(IUCN12P), ncol = ncol(PanTHERIA12)))
colnames(IUCN_empty12P) <- colnames(PanTHERIA12)
IUCN_empty12P$binomial <- IUCN12P$binomial
# combine trait database with empty values for species listed by the IUCN but not listed by PanTHERIA
pan12 <- rbind(pan12, IUCN_empty12P)
## 1235 All mammals for presence = extant; origin = native, reintroduced, introduced, origin ##
PanTHERIA1235 <- anti_join(pan, am1235u, by = "binomial")
# Species listed by PanTHERIA but not listed by IUCN
# nrow = 612
IUCN1235P <- anti_join(am1235u, pan, by = "binomial")
# IUCN species not listed in PanTHERIA
# nrow = 431
pan1235 <- pan[!(pan$binomial %in% c(as.vector(PanTHERIA1235$binomial))),]
# removed species listed by PanTHERIA but not listed by IUCN
# nrow = 4804
# create empty dataframe to match trait database columns
IUCN_empty1235P <- data.frame(matrix(NA, nrow = nrow(IUCN1235P), ncol = ncol(PanTHERIA1235)))
colnames(IUCN_empty1235P) <- colnames(PanTHERIA1235)
IUCN_empty1235P$binomial <- IUCN1235P$binomial
# combine trait database with empty values for species listed by the IUCN but not listed by PanTHERIA
pan1235 <- rbind(pan1235, IUCN_empty1235P)
nrow(pan1235)
nrow(trait_out_final)
tail(trait_out_final)
nrow(am1235u)
nrow(trait_out)
nrow(IUCN)
IUCN <- trait_fun$IUCN
nrow(IUCN)
nrow(trait_database)
nrow(IUCN_empty1235P)
head(IUCN_empty1235P)
trait <- function(trait, species, binomial)
{
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, taxize, data.table, rlist)
# dplyr: used to compare two data frames, combine species names # calls: anti_join, mutate
# taxize: used to find taxonomic synonyms and subspecies for taxonomic mismatches # calls: synonyms
# data.table: used to concantenate a list of data frames # calls: rbindlist
# rlist: used to remove data frames from a list of data frames # calls: list.remove
## 1235 All mammals for presence = extant; origin = native, reintroduced, introduced, origin ##
trait_database <- anti_join(trait, species, by = "binomial")
# Species listed by trait database but not listed by IUCN
# nrow = 612
IUCN <- anti_join(species, trait, by = "binomial")
# IUCN species not listed in trait database
# nrow = 431
trait_out <- trait[!(trait$binomial %in% c(as.vector(trait_database$binomial))),]
# removed species listed by trait database but not listed by IUCN
# nrow = 4804
# create empty dataframe to match trait database columns
IUCN_empty <- data.frame(matrix(NA, nrow = nrow(IUCN), ncol = ncol(trait_database)))
colnames(IUCN_empty) <- colnames(trait_database)
IUCN_empty$binomial <- IUCN$binomial
# combine trait database with empty values for species listed by the IUCN but not listed by trait database
trait_out_final <- rbind(trait_out, IUCN_empty)
## Find and try synonyms for trait data ##
spp <- IUCN$binomial[1:10] # species list to find synonyms for: species listed by IUCN1235 but not listed by trait database
syno <- synonyms(spp, db = "itis") # find synonyms - uses taxize package
no_syn <- which(is.na(syno) == TRUE); no_syn <- names(no_syn) # list those that have no synonyms
spp_syn <- setdiff(spp, no_syn) # remove species from species list that have no synonyms
syndf <- list.remove(syno, no_syn) # remove species data frames from synonym list that are empty - uses rlist package
Syn <- as.data.frame(data.table::rbindlist(syndf)) # collapse list of data frames for each species into new single data frame
seq_bi <- sapply(syndf, nrow) %>% unlist(seq_bi) # number of rows per species
seq_bi <- rep(spp_syn, times = as.vector(seq_bi)) # repeat species names with synonyms by seq_bi
Syn <- mutate(Syn, binomial = seq_bi)  # add sequence of species names to synonym data frame
acc_tsn1 <- ifelse(is.na(as.numeric(Syn$acc_tsn)), Syn$syn_name, Syn$acc_tsn) # swap accepted tsn with syn names where needed
Syn <- mutate(Syn, acc_tsn1 = acc_tsn1) # add edited acc_tsn column to data frame
syn_name1 <- ifelse(!is.na(as.numeric(Syn$syn_name)), Syn$acc_tsn, Syn$syn_name) # swap syn names with accepted tsn where needed
Syn <- mutate(Syn, syn_name1 = syn_name1) # add edited syn_name column to data frame
Syn <- Syn[c(5,1,6:7,4)] # reorder columns to move binomial from the end
# if else chained loop to split data in to first, second, third and fourth synonyms depending on the species with the most synonyms in data frame
if(max(as.vector(table(Syn$binomial))) == 1) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
} else {
if(max(as.vector(table(Syn$binomial))) == 2) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_2 <- Syn[duplicated(Syn$binomial),] # create data frame of second synonyms
} else {
if(max(as.vector(table(Syn$binomial))) == 3) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_T <- Syn[duplicated(Syn$binomial),] # create data frame of second synonyms
Syn_2 <- Syn_T[!duplicated(Syn_T$binomial),] # create temporary dataframe
Syn_3 <- Syn_T[duplicated(Syn_T$binomial),] # create data frame of third synonyms
rm(Syn_T)
} else {
if(max(as.vector(table(Syn$binomial))) == 4) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_T <- Syn[duplicated(Syn$binomial),] # create temporary dataframe
Syn_2 <- Syn_T[!duplicated(Syn_T$binomial),] # create data frame of second synonyms
Syn_T <- Syn_T[duplicated(Syn_T$binomial),] # create temporary dataframe
Syn_3 <- Syn_T[!duplicated(Syn_T$binomial),] # create data frame of third synonyms
Syn_4 <- Syn_T[duplicated(Syn_T$binomial),] # create data frame of fourth synonyms
rm(Syn_T)
}}}}
stats <- list(
trait_database = trait_database,
IUCN = IUCN,
trait_out = trait_out,
trait_out_final = trait_out_final)
return(stats)
} # end of trait function
trait_fun <- trait(trait = pan, species = am1235u)
trait_database <- trait_fun$trait_database
IUCN <- trait_fun$IUCN
trait_out_final <- trait_fun$trait_out_final
trait_out <- trait_fun$trait_out
nrow(trait_database)
nrow(trait_out)
nrow(trait_out_final)
nrow(IUCN)
seq_bi <- sapply(syndf, nrow) %>% unlist(seq_bi)
seq_bi
seq_bi <- rep(spp1235P_syn, times = as.vector(seq_bi))
seq_bi
seq_bi <- sapply(syndf, nrow) %>% unlist(seq_bi) %>% # number of rows per species
rep(spp1235P_syn, times = as.vector(seq_bi))
## read in PanTHERIA trait database
pan <- read.csv("PanTHERIA_1-0_WR05_Aug2008.csv")
# nrow = 5416
colnames(pan)[5] <- "binomial"
# set column MSW05_Binomial to binomial to match species tables
pan <- arrange(pan, binomial)
# order data by binomial A-Z
## 12 All mammals for presence = extant; origin = native, reintroduced ##
PanTHERIA12 <- anti_join(pan, am12u, by = "binomial") # Fine to ignore Warning message: In anti_join_impl(x, y, by$x, by$y) : joining factors with different levels, coercing to character vector
# Species listed by PanTHERIA but not listed by IUCN
# nrow = 614
IUCN12P <- anti_join(am12u, pan, by = "binomial")
# IUCN species not listed in PanTHERIA
# nrow = 431
pan12 <- pan[!(pan$binomial %in% c(as.vector(PanTHERIA12$binomial))),]
# removed species listed by PanTHERIA but not listed by IUCN
# nrow = 4802
# create empty dataframe to match trait database columns
IUCN_empty12P <- data.frame(matrix(NA, nrow = nrow(IUCN12P), ncol = ncol(PanTHERIA12)))
colnames(IUCN_empty12P) <- colnames(PanTHERIA12)
IUCN_empty12P$binomial <- IUCN12P$binomial
# combine trait database with empty values for species listed by the IUCN but not listed by PanTHERIA
pan12 <- rbind(pan12, IUCN_empty12P)
## 1235 All mammals for presence = extant; origin = native, reintroduced, introduced, origin ##
PanTHERIA1235 <- anti_join(pan, am1235u, by = "binomial")
# Species listed by PanTHERIA but not listed by IUCN
# nrow = 612
IUCN1235P <- anti_join(am1235u, pan, by = "binomial")
# IUCN species not listed in PanTHERIA
# nrow = 431
pan1235 <- pan[!(pan$binomial %in% c(as.vector(PanTHERIA1235$binomial))),]
# removed species listed by PanTHERIA but not listed by IUCN
# nrow = 4804
# create empty dataframe to match trait database columns
IUCN_empty1235P <- data.frame(matrix(NA, nrow = nrow(IUCN1235P), ncol = ncol(PanTHERIA1235)))
colnames(IUCN_empty1235P) <- colnames(PanTHERIA1235)
IUCN_empty1235P$binomial <- IUCN1235P$binomial
# combine trait database with empty values for species listed by the IUCN but not listed by PanTHERIA
pan1235 <- rbind(pan1235, IUCN_empty1235P)
#write.table(PanTHERIA1235, "~/R/Functional_integrity/PanTHERIA1235.csv", sep=",") # Species listed by PanTHERIA but not listed by IUCN 1235
#write.table(PanTHERIA12, "~/R/Functional_integrity/PanTHERIA12.csv", sep=",") # Species listed by PanTHERIA but not listed by IUCN 12
#write.table(IUCN1235P, "~/R/Functional_integrity/IUCN1235P.csv", sep=",") # Species listed by IUCN 1235 but not listed by PanTHERIA
#write.table(IUCN12P, "~/R/Functional_integrity/IUCN12P.csv", sep=",") # Species listed by IUCN 12 but not listed by PanTHERIA
#write.table(pan1235, "~/R/Functional_integrity/ALL_Mammals_1235_traits_PanTHERIA.csv", sep=",") # PanTHERIA trait data for all IUCN 1235 species
#write.table(pan12, "~/R/Functional_integrity/ALL_Mammals_12_traits_PanTHERIA.csv", sep=",") # PanTHERIA trait data for all IUCN 12 species
# Species different between 12 and 1235
anti_join(PanTHERIA12, PanTHERIA1235, by = "binomial")
# Mus musculus - look at IUCN map
# Acomys nesiotes - Acomys nesiotes is endemic to Cyprus, where available evidence
# suggests that it was possibly introduced by humans, and therefore may represent a
# non-native population of Acomys cahirinus.
## Find and try synonyms for trait data ##
spp1235P <- IUCN1235P$binomial[1:10] # species list to find synonyms for: species listed by IUCN1235 but not listed by PanTHERIA
syn <- synonyms(spp1235P, db = "itis") # find synonyms - uses taxize package
no_syn <- which(is.na(syn) == TRUE); no_syn <- names(no_syn) # list those that have no synonyms
spp1235P_syn <- setdiff(spp1235P, no_syn) # remove species from species list that have no synonyms
syndf <- list.remove(syn, no_syn) # remove species data frames from synonym list that are empty - uses rlist package
Syn1235P <- as.data.frame(data.table::rbindlist(syndf)) # collapse list of data frames for each species into new single data frame
seq_bi <- sapply(syndf, nrow) %>% unlist(seq_bi) # number of rows per species
seq_bi <- rep(spp1235P_syn, times = as.vector(seq_bi)) # repeat species names with synonyms by seq_bi
Syn1235P <- mutate(Syn1235P, binomial = seq_bi)  # add sequence of species names to synonym data frame
acc_tsn1 <- ifelse(is.na(as.numeric(Syn1235P$acc_tsn)), Syn1235P$syn_name, Syn1235P$acc_tsn) # swap accepted tsn with syn names where needed
Syn1235P <- mutate(Syn1235P, acc_tsn1 = acc_tsn1) # add edited acc_tsn column to data frame
syn_name1 <- ifelse(!is.na(as.numeric(Syn1235P$syn_name)), Syn1235P$acc_tsn, Syn1235P$syn_name) # swap syn names with accepted tsn where needed
Syn1235P <- mutate(Syn1235P, syn_name1 = syn_name1) # add edited syn_name column to data frame
Syn1235P <- Syn1235P[c(5,1,6:7,4)] # reorder columns to move binomial from the end
# if else chained loop to split data in to first, second, third and fourth synonyms depending on the species with the most synonyms in data frame
if(max(as.vector(table(Syn1235P$binomial))) == 1) {
Syn1235P_1 <- Syn1235P[!duplicated(Syn1235P$binomial),] # create data frame of first synonyms
} else {
if(max(as.vector(table(Syn1235P$binomial))) == 2) {
Syn1235P_1 <- Syn1235P[!duplicated(Syn1235P$binomial),] # create data frame of first synonyms
Syn1235P_2 <- Syn1235P[duplicated(Syn1235P$binomial),] # create data frame of second synonyms
} else {
if(max(as.vector(table(Syn1235P$binomial))) == 3) {
Syn1235P_1 <- Syn1235P[!duplicated(Syn1235P$binomial),] # create data frame of first synonyms
Syn1235P_T <- Syn1235P[duplicated(Syn1235P$binomial),] # create data frame of second synonyms
Syn1235P_2 <- Syn1235P_T[!duplicated(Syn1235P_T$binomial),] # create temporary dataframe
Syn1235P_3 <- Syn1235P_T[duplicated(Syn1235P_T$binomial),] # create data frame of third synonyms
rm(Syn1235P_T)
} else {
if(max(as.vector(table(Syn1235P$binomial))) == 4) {
Syn1235P_1 <- Syn1235P[!duplicated(Syn1235P$binomial),] # create data frame of first synonyms
Syn1235P_T <- Syn1235P[duplicated(Syn1235P$binomial),] # create temporary dataframe
Syn1235P_2 <- Syn1235P_T[!duplicated(Syn1235P_T$binomial),] # create data frame of second synonyms
Syn1235P_T <- Syn1235P_T[duplicated(Syn1235P_T$binomial),] # create temporary dataframe
Syn1235P_3 <- Syn1235P_T[!duplicated(Syn1235P_T$binomial),] # create data frame of third synonyms
Syn1235P_4 <- Syn1235P_T[duplicated(Syn1235P_T$binomial),] # create data frame of fourth synonyms
rm(Syn1235P_T)
}}}}
Syn1235P_1
names(Syn1235P_1) <- c("binomial_original", "sub_tsn", "acc_tsn", "binomial", "syn_tsn")
Syn1235P_1
Syn_1 <- anti_join(pan, Syn1235P_1, by = "binomial")
# Species listed by PanTHERIA but not listed by IUCN
# nrow = 612
nrow(Syn_1)
pan1235 <- pan[!(pan$binomial %in% c(as.vector(PanTHERIA1235$binomial))),]
# removed species listed by PanTHERIA but not listed by IUCN
# nrow = 4804
pan1235
head(pan1235)
pan1235T <- pan[!(pan$binomial %in% c(as.vector(PanTHERIA1235$binomial))),]
# removed species listed by PanTHERIA but not listed by IUCN
# nrow = 4804
pan1235 <- rbind(pan1235T, IUCN_empty1235P)
IUCN_small <- am1235u[!(am1235u$binomial %in% c(as.vector(pan1235T$binomial))),]
nrow(IUCN_small)
head(IUCN1235P)
IUCN_syn_1 <- anti_join(Syn1235P_1, pan, by = "binomial")
head(IUCN_syn_1)
nrow(IUCN_syn_1)
nrow(Syn_1)
Syn_T <- pan[!(pan$binomial %in% c(as.vector(Syn_1$binomial))),]
# removed species listed by synonyms but not listed by IUCN
# nrow = 4804
head(Syn_T)
nrow(Syn_T)
head(pan1235)
View(pan1235)
nrow(pan1235)
names(Syn1235P_1) <- c("binomial_IUCN", "sub_tsn", "acc_tsn", "binomial", "syn_tsn")
Syn_1 <- anti_join(pan, Syn1235P_1, by = "binomial")
# Species listed by synonyms but not listed by IUCN
# nrow = 5413
Syn1235P_1
hdg <- full_join(am12u, pan)
head(hdg)
nrow(HDG)
nrow(hdg)
hdg <- full_join(am1235u, pan)
head(hdg)
hdg <- inner_join(am1235u, pan, by = "binomial")
head(hdg)
nrow(hdg)
nrow(trait_out)
nrow(trait_out_final)
hdg <- full_join(am1235u, pan, by = "binomial")
nrow(hdg)
trait <- function(trait, species, binomial)
{
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, taxize, data.table, rlist)
# dplyr: used to compare two data frames, combine species names # calls: anti_join, mutate
# taxize: used to find taxonomic synonyms and subspecies for taxonomic mismatches # calls: synonyms
# data.table: used to concantenate a list of data frames # calls: rbindlist
# rlist: used to remove data frames from a list of data frames # calls: list.remove
## 1235 All mammals for presence = extant; origin = native, reintroduced, introduced, origin ##
trait_database <- anti_join(trait, species, by = "binomial")
# Species listed by trait database but not listed by IUCN
# nrow = 612
trait_out <- full_join(am1235u, pan, by = "binomial")
# nrow = 4804
trait_out_final <- trait_out[!(trait_out$binomial %in% c(as.vector(trait_database$binomial))),]
# removed species listed by trait database but not listed by IUCN
## Find and try synonyms for trait data ##
spp <- IUCN$binomial[1:10] # species list to find synonyms for: species listed by IUCN1235 but not listed by trait database
syno <- synonyms(spp, db = "itis") # find synonyms - uses taxize package
no_syn <- which(is.na(syno) == TRUE); no_syn <- names(no_syn) # list those that have no synonyms
spp_syn <- setdiff(spp, no_syn) # remove species from species list that have no synonyms
syndf <- list.remove(syno, no_syn) # remove species data frames from synonym list that are empty - uses rlist package
Syn <- as.data.frame(data.table::rbindlist(syndf)) # collapse list of data frames for each species into new single data frame
seq_bi <- sapply(syndf, nrow) %>% unlist(seq_bi) # number of rows per species
seq_bi <- rep(spp_syn, times = as.vector(seq_bi)) # repeat species names with synonyms by seq_bi
Syn <- mutate(Syn, binomial = seq_bi)  # add sequence of species names to synonym data frame
acc_tsn1 <- ifelse(is.na(as.numeric(Syn$acc_tsn)), Syn$syn_name, Syn$acc_tsn) # swap accepted tsn with syn names where needed
Syn <- mutate(Syn, acc_tsn1 = acc_tsn1) # add edited acc_tsn column to data frame
syn_name1 <- ifelse(!is.na(as.numeric(Syn$syn_name)), Syn$acc_tsn, Syn$syn_name) # swap syn names with accepted tsn where needed
Syn <- mutate(Syn, syn_name1 = syn_name1) # add edited syn_name column to data frame
Syn <- Syn[c(5,1,6:7,4)] # reorder columns to move binomial from the end
# if else chained loop to split data in to first, second, third and fourth synonyms depending on the species with the most synonyms in data frame
if(max(as.vector(table(Syn$binomial))) == 1) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
} else {
if(max(as.vector(table(Syn$binomial))) == 2) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_2 <- Syn[duplicated(Syn$binomial),] # create data frame of second synonyms
} else {
if(max(as.vector(table(Syn$binomial))) == 3) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_T <- Syn[duplicated(Syn$binomial),] # create data frame of second synonyms
Syn_2 <- Syn_T[!duplicated(Syn_T$binomial),] # create temporary dataframe
Syn_3 <- Syn_T[duplicated(Syn_T$binomial),] # create data frame of third synonyms
rm(Syn_T)
} else {
if(max(as.vector(table(Syn$binomial))) == 4) {
Syn_1 <- Syn[!duplicated(Syn$binomial),] # create data frame of first synonyms
Syn_T <- Syn[duplicated(Syn$binomial),] # create temporary dataframe
Syn_2 <- Syn_T[!duplicated(Syn_T$binomial),] # create data frame of second synonyms
Syn_T <- Syn_T[duplicated(Syn_T$binomial),] # create temporary dataframe
Syn_3 <- Syn_T[!duplicated(Syn_T$binomial),] # create data frame of third synonyms
Syn_4 <- Syn_T[duplicated(Syn_T$binomial),] # create data frame of fourth synonyms
rm(Syn_T)
}}}}
stats <- list(
trait_database = trait_database,
IUCN = IUCN,
trait_out = trait_out,
trait_out_final = trait_out_final)
return(stats)
} # end of trait function
trait_fun <- trait(trait = pan, species = am1235u)
trait_database <- trait_fun$trait_database
IUCN <- trait_fun$IUCN
trait_out <- trait_fun$trait_out
trait_out_final <- trait_fun$trait_out_final
nrow(trait_out)
nrow(trait_out_final)
syn_G <- full_join(Syn1235P_1, pan, by = "binomial")
head(syn_G)
nrow(syn_G)
syn_G <- inner_join(Syn1235P_1, pan, by = "binomial")
nrow(syn_G)
head(syn_G)
setnames(syn_G, "binomial", "binomial_synonym")
head(syn_G)
IUCN_syn_1
Syn_T
names(Syn1235P_2) <- c("binomial_IUCN", "sub_tsn", "acc_tsn", "binomial", "syn_tsn")
IUCN_syn_2 <- anti_join(Syn1235P_2, pan, by = "binomial")
# IUCN species not listed in synonyms
# nrow = 4
syn_B <- inner_join(Syn1235P_2, pan, by = "binomial")
setnames(syn_B, "binomial", "binomial_synonym")
setnames(syn_B, "binomial_IUCN", "binomial")
IUCN_syn_2
syn_B
IUCN_syn_1 <- anti_join(Syn1235P_1, pan, by = "binomial")
# IUCN species not listed in synonyms
# nrow = 4
syn_a <- inner_join(Syn1235P_1, pan, by = "binomial")
setnames(syn_a, "binomial", "binomial_synonym")
setnames(syn_a, "binomial_IUCN", "binomial")
names(Syn1235P_2) <- c("binomial_IUCN", "sub_tsn", "acc_tsn", "binomial", "syn_tsn")
IUCN_syn_2 <- anti_join(Syn1235P_2, pan, by = "binomial")
# IUCN species not listed in synonyms
# nrow = 1
syn_b <- inner_join(Syn1235P_2, pan, by = "binomial")
setnames(syn_b, "binomial", "binomial_synonym")
setnames(syn_b, "binomial_IUCN", "binomial")
hdg <- full_join(am1235u, pan, by = "binomial")
flip <- full_join(hdg, syn_a, by = "binomial")
head(flip)
flip <- left_join(hdg, syn_a, by = "binomial")
head(flip)
flip <- semi_join(hdg, syn_a, by = "binomial")
head(flip)
flip <- inner_join(hdg, syn_a, by = "binomial")
nrow(flip)
flip <- left_join(hdg, syn_a, by = "binomial")
flip
nrow(flip)
View(flip)
hi <- rbind(hdg, syn_a)
head(hdg)
bla <- merge(hdg, syn_a, by = "binomial")
head(bla)
bla <- merge(hdg, syn_a, by = "binomial", all.x = TRUE)
head(bla)
nrow(bla)
ncol(bla)
ncol(hdg)
Syn1235P_1
View(bla)
merge(hdg, syn_a, all = TRUE)
it <- merge(hdg, syn_a, all = TRUE)
nrow(it)
ncol(it)
head(it)
tail(it)
syn_a
it[it$binomial = "Aethomys granti"]
it[it$binomial == "Aethomys granti"]
it[it$binomial == "Aethomys granti",]
it <- merge(hdg, syn_a, by = "binomial", all = TRUE)
nrow(it)
head(it)
flip <- left_join(hdg, syn_a)
nrow(flip)
head(flip)
it[it$binomial == "Aethomys granti",]
