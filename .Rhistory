# 263
nrow(trait_data_Elton) - nrow(IUCN_Elton) # Number of species matched to trait data
# 4972
(nrow(trait_data_Elton) - nrow(IUCN_Elton))/nrow(trait_data_Elton)*100 # Percent of species macthed to trait data
# 95% matched
nrow(IUCN_Elton)
saveRDS(trait_Elton, "trait_Elton.rds")
trait_E <- readRDS("trait_Elton.rds") # How to load the file under a different nameif needed
write.csv(IUCN_Elton, "~/R/Functional_integrity/Missing_IUCN_Elton.csv")
write.csv(trait_data_Elton, "~/R/Functional_integrity/Trait_Elton.csv")
## read in Amniote trait database
amn <- read.csv("Amniote_Database_Aug_2015.csv", stringsAsFactors = FALSE)
# nrow = 21322
# create new column with full scientific name
amn <- mutate(amn, binomial = paste(genus, species, sep = " ")) # name as binomial to match species data
amn <- amn[c(1:7,37,8:36)] # reorder columns to move binomial from the end
# subset just for mammals
amn <- amn[amn$class == "Mammalia",]
# nrow = 4953
amn <- arrange(amn, binomial)
# order data by binomial A-Z
trait_Amniote <- trait(trait = amn, species = IUCN_species)
IUCN_Amniote <- trait_Amniote$IUCN_names # IUCN species not matched by synonyms, i.e. species that need further matching efforts
trait_data_Amniote <- trait_Amniote$trait_data # Trait data for all IUCN species after trying synonyms
nrow(IUCN_Amniote) # Number of species not matched to trait data
View(IUCN_Amniote)
nrow(trait_data_Amniote) - nrow(IUCN_Amniote) # Number of species matched to trait data
(nrow(trait_data_Amniote) - nrow(IUCN_Amniote))/nrow(trait_data_Amniote)*100 # Percent of species macthed to trait data
View(trait_data_Amniote)
saveRDS(trait_Amniote, "trait_Amniote.rds")
write.csv(IUCN_Amniote, "~/R/Functional_integrity/Missing_IUCN_Amniote.csv")
write.csv(trait_data_Amniote, "~/R/Functional_integrity/Trait_Amniote.csv")
g <- trait_data_Amniote[trait_data_Amniote==-999] <- NA
View(g)
trait_data_Amniote[trait_data_Amniote==-999] <- NA
View(trait_data_Amniote)
apply(trait_data_Amniote, 2, function(x) length(which(!is.na(x))))
trait_data_PanTHERIA[trait_data_PanTHERIA==-999] <- NA
apply(trait_data_PanTHERIA, 2, function(x) length(which(!is.na(x))))
2366/5235*100
nrow(trait_data_PanTHERIA)
3329/5235*100
4323/5235*100
3262/5235*100
trait_data_Elton[trait_data_Elton==-999] <- NA
apply(trait_data_Elton, 2, function(x) length(which(!is.na(x))))
View(trait_data_Elton)
4971/5235*100
########### MammalDiet ####################
## read in MammalDiet 1.0 trait database
md <- read.csv("MammalDIET_V1.0.csv")
# nrow = 5364
# create new column with full scientific name
md <- mutate(md, binomial = paste(Genus, Species, sep = " ")) # name as binomial to match species data
md <- md[c(1:5,31,6:30)] # reorder columns to move binomial from the end
md <- arrange(md, binomial)
# order data by binomial A-Z
trait_MD <- trait(trait = md, species = IUCN_species)
IUCN_MD <- trait_MD$IUCN_names # IUCN species not matched by synonyms, i.e. species that need further matching efforts
trait_data_MD <- trait_MD$trait_data # Trait data for all IUCN species after trying synonyms
nrow(IUCN_MD) # Number of species not matched to trait data
View(IUCN_MD)
View(trait_data_MD)
nrow(trait_data_MD) - nrow(IUCN_MD) # Number of species matched to trait data
(nrow(trait_data_MD) - nrow(IUCN_MD))/nrow(trait_data_MD)*100 # Percent of species macthed to trait data
saveRDS(trait_MD, "trait_MD.rds")
write.csv(IUCN_MD, "~/R/Functional_integrity/Missing_IUCN_MD.csv")
write.csv(trait_data_MD, "~/R/Functional_integrity/Trait_MD.csv")
trait_data_MD[trait_data_MD==-999] <- NA # turn -999 to NAs
apply(trait_data_MD, 2, function(x) length(which(!is.na(x)))) # count per col
5130/5235*100
5146/5235*100
trait_P <- readRDS("trait_PanTHERIA.rds")
trait_A <- readRDS("trait_Amniote.rds")
trait_E <- readRDS("trait_Elton.rds")
trait_M <- readRDS("trait_MD.rds")
go <- cbind(trait_P$trait_data, trait_A$trait_data)
View(go)
go <- merge(trait_P$trait_data, trait_A$trait_data)
View(go)
go <- merge(trait_P$trait_data, trait_A$trait_data, by = "binomial")
View(go)
trait_P$trait_data[trait_P$trait_data$binomial == "Gazella dorcas",]
h <- trait_A$trait_data[trait_A$trait_data$binomial == "Gazella dorcas",]
f <- trait_P$trait_data[trait_P$trait_data$binomial == "Gazella dorcas",]
go <- merge(trait_P$trait_data, trait_A$trait_data)
View(go)
View(f)
big <- Reduce(function(x, y) merge(x, y, all=TRUE), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
ncol(big)
View(big)
head(big)
colnames(big)
View(big)
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr)
sub <- select(big, id_no:origin, MSW05_Genus, MSW05_Species) # select columns id_no to origin,
View(sub)
nrow(big)
nrow(trait_P$trait_data)
big <- Reduce(function(x, y) merge(x, y), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
nrow(trait_P$trait_data)
nrow(trait_A$trait_data)
nrow(trait_E$trait_data)
nrow(trait_M$trait_data)
big <- Reduce(function(x, y) merge(x, y, by = c("id_no","binomial")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
big <- Reduce(function(x, y) inner_join(x, y), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
colnames(trait_P$trait_data)
colnames(trait_E$trait_data)
colnames(trait_A$trait_data)
colnames(trait_M$trait_data)
big <- Reduce(function(x, y) merge(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area", "syn_name1", "syn_name2", "syn_name3", "syn_name4", "syn_name5", "syn_name6", "syn_name_sub1", "syn_name_sub2", "syn_name_sub3", "syn_name_sub4", "syn_name_sub5", "syn_name_sub6")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
big <- Reduce(function(x, y) merge(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
big <- Reduce(function(x, y) inner_join(x, y, by = "binomial"), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
sub <- select(big, id_no:origin, MSW05_Genus, MSW05_Species) # select columns id_no to origin,
head(big)
big <- Reduce(function(x, y) inner_join(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
colnames(big)
big <- Reduce(function(x, y) inner_join(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area", "syn_name1", "syn_name2", "syn_name3", "syn_name4", "syn_name5", "syn_name6", "syn_name_sub1", "syn_name_sub2", "syn_name_sub3", "syn_name_sub4", "syn_name_sub5", "syn_name_sub6")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
big <- Reduce(function(x, y) inner_join(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
sub <- select(big, id_no:origin, MSW05_Genus, MSW05_Species) # select columns id_no to origin,
big[,!duplicated(colnames(big))] # remove duplicated syn_name columns produced during inner_join
big <- big[,!duplicated(colnames(big))] # remove duplicated syn_name columns produced during inner_join
sub <- select(big, id_no:origin, MSW05_Genus, MSW05_Species) # select columns id_no to origin,
View(sub)
View(sub)
colnames(big)
View(big)
taxonomic <- select(big, id_no:origin, MSW05_Genus, MSW05_Species, genus, species, MSWFamilyLatin, Genus, Species) # select columns id_no to origin,
View(taxonomic)
head(trait_E$trait_data)
## read in Elton Traits 1.0 database
et <- read.csv("MamFuncDat.csv", stringsAsFactors = FALSE)
# nrow = 5400
colnames(et)
########### EltonTraits 1.0  - mammals ####################
## read in Elton Traits 1.0 database
et <- read.csv("MamFuncDat.csv", stringsAsFactors = FALSE)
# nrow = 5400
et <- mutate(et, binomial = Scientific)
# duplicate scientific column and name it binomial to match species data
et <- arrange(et, binomial)
# order data by binomial A-Z
trait_Elton <- trait(trait = et, species = IUCN_species)
## --------------------------------------------------------------
## Name: trait_function.R
## Description: Function to match IUCN species data to trait databases
## Author: R.S.C. Cooke, R.S.Cooke@soton.ac.uk
## Date: June 2016 -
## Outputs: Function named "trait"
## Options: trait = the trait data set up with the species name column identifed as binomial
##          species = the list of species to match the trait data against
## --------------------------------------------------------------
trait <- function(trait, species)
{
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, taxize, data.table, rlist, stats, tidyr)
# dplyr: used to compare two data frames, create new columns and order data # calls: anti_join, full_join, inner_join, mutate, arrange
# taxize: used to find taxonomic synonyms and subspecies for taxonomic mismatches # calls: synonyms
# data.table: used to concantenate a list of data frames # calls: rbindlist
# rlist: used to remove data frames from a list of data frames # calls: list.remove
# stats: used to aggregate synonyms # calls: aggregate
# tidyr: used to separate synonyms in to two columns # calls: separate
spp <- anti_join(species, trait, by = "binomial") # uses dplyr package
# IUCN species not listed in trait database
trait_database <- anti_join(trait, species, by = "binomial") # uses dplyr package
# Species listed by trait database but not listed by IUCN
trait_out <- full_join(species, trait, by = "binomial") # uses dplyr package
## Find and try synonyms for trait data ##
spp <- spp$binomial # species list to find synonyms for: species listed by IUCN1235 but not listed by trait_outTHERIA
syn <- synonyms(spp, db = "itis") # find synonyms - uses taxize package
no_syn_na <- which(is.na(syn) == TRUE); no_syn_na <- names(no_syn_na) # list those species that have no synonym data
no_syn_col <- which(sapply(syn, NCOL) == 3); no_syn_col <- names(no_syn_col) # list those species that have data but no synonyms
no_syn <- c(no_syn_na, no_syn_col)
spp_syn <- setdiff(spp, no_syn) # remove species from species list that have no synonyms
syndf <- list.remove(syn, no_syn) # remove species data frames from synonym list that are empty - uses rlist package
SYN <- as.data.frame(data.table::rbindlist(syndf)) # collapse list of data frames for each species into new single data frame - uses data.table package
seq_bi <- sapply(syndf, nrow); seq_bi <- unlist(seq_bi) # number of rows per species
seq_bi <- rep(spp_syn, times = as.vector(seq_bi)) # repeat species names with synonyms by seq_bi
SYN <- mutate(SYN, binomial_IUCN = seq_bi)  # add sequence of species names to synonym data frame - uses dplyr package
acc_tsn_e <- suppressWarnings(ifelse(is.na(as.numeric(SYN$acc_tsn)), SYN$syn_name, SYN$acc_tsn)) # swap accepted tsn with syn names where needed - suppresses warning: "In ifelse(is.na(as.numeric(SYN$acc_tsn)), SYN$syn_name, SYN$acc_tsn) : NAs introduced by coercion"
SYN <- mutate(SYN, acc_tsn_e = acc_tsn_e) # add edited acc_tsn column to data frame - uses dplyr package
syn_name_e <- suppressWarnings(ifelse(!is.na(as.numeric(SYN$syn_name)), SYN$acc_tsn, SYN$syn_name)) # swap syn names with accepted tsn where needed - suppresses warning: "In ifelse(!is.na(as.numeric(SYN$syn_name)), SYN$acc_tsn, SYN$syn_name) : NAs introduced by coercion"
SYN <- mutate(SYN, syn_name_e = syn_name_e) # add edited syn_name column to data frame - uses dplyr package
SYN <- aggregate(SYN, by = list(SYN$binomial_IUCN), FUN = unique) # collapse species with more than one synonym into one row - uses stats package
SYN <- separate(SYN, syn_name_e, c("syn_name1", "syn_name2", "syn_name3", "syn_name4", "syn_name5", "syn_name6"), ", ", extra = "merge", fill = "right") # split multiple synonyms into separate columns - uses tidyr package
SYN$syn_name1 <- gsub("c(", "", SYN$syn_name1, fixed = TRUE) # remove leading "c(" introduced by separate
SYN$syn_name1 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name1) # remove all punctuation introduced by separate
SYN$syn_name2 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name2) # remove all punctuation introduced by separate
SYN$syn_name3 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name3) # remove all punctuation introduced by separate
SYN$syn_name4 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name4) # remove all punctuation introduced by separate
SYN$syn_name5 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name5) # remove all punctuation introduced by separate
SYN$syn_name6 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name6) # remove all punctuation introduced by separate
SYN <- mutate(SYN, syn_name_sub1 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name1))) # add column of trinomials reduced to binomials based on first synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub2 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name2))) # add column of trinomials reduced to binomials based on second synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub3 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name3))) # add column of trinomials reduced to binomials based on third synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub4 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name4))) # add column of trinomials reduced to binomials based on fourth synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub5 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name5))) # add column of trinomials reduced to binomials based on fifth synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub6 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name6))) # add column of trinomials reduced to binomials based on sixth synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- SYN[c(6,2,7:ncol(SYN))] # reorder columns to move binomial from the end and drop unneeded columns
## Synonyms
syn_a <- inner_join(SYN, trait, by = c("syn_name1" = "binomial")) # uses dplyr package
# Species matched in trait database based on first synonyms
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_a$binomial_IUCN))),]
# Remove species matched by first synonym - do not need to try second synonym
syn_b <- inner_join(SYN, trait, by = c("syn_name2" = "binomial")) # uses dplyr package
# Species matched in trait database based on second synonyms
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_b$binomial_IUCN))),]
# Remove species matched by second synonym - do not need to try third synonym
syn_c <- inner_join(SYN, trait, by = c("syn_name3" = "binomial")) # uses dplyr package
# Species matched in trait database based on third synonym
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_c$binomial_IUCN))),]
# Remove species matched by third synonym - do not need to try fourth synonym
syn_d <- inner_join(SYN, trait, by = c("syn_name4" = "binomial")) # uses dplyr package
# Species matched in trait database based on fourth synonym
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_d$binomial_IUCN))),]
# Remove species matched by fourth synonym - do not need to try fifth synonym
syn_e <- inner_join(SYN, trait, by = c("syn_name5" = "binomial")) # uses dplyr package
# Species matched in trait database based on fifth synonym
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_e$binomial_IUCN))),]
# Remove species matched by fifth synonym - do not need to try sixth synonym
syn_f <- inner_join(SYN, trait, by = c("syn_name6" = "binomial")) # uses dplyr package
# Species matched in trait database based on sixth synonym
## Subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_f$binomial_IUCN))),]
# Remove species matched by sixth synonym - do not need to try first collapsed (from trinomial into binomial) subspecies
syn_g <- inner_join(SYN, trait, by = c("syn_name_sub1" = "binomial")) # uses dplyr package
# Species matched in trait database based on first subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_g$binomial_IUCN))),]
# Remove species matched by first subspecies - do not need to try second collapsed subspecies
syn_h <- inner_join(SYN, trait, by = c("syn_name_sub2" = "binomial")) # uses dplyr package
# Species matched in trait database based on second subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_h$binomial_IUCN))),]
# Remove species matched by second subspecies - do not need to try third collapsed subspecies
syn_i <- inner_join(SYN, trait, by = c("syn_name_sub3" = "binomial")) # uses dplyr package
# Species matched in trait database based on third subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_i$binomial_IUCN))),]
# Remove species matched by third subspecies - do not need to try fourth collapsed subspecies
syn_j <- inner_join(SYN, trait, by = c("syn_name_sub4" = "binomial")) # uses dplyr package
# Species matched in trait database based on fourth subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_j$binomial_IUCN))),]
# Remove species matched by fourth subspecies - do not need to try fifth collapsed subspecies
syn_k <- inner_join(SYN, trait, by = c("syn_name_sub5" = "binomial")) # uses dplyr package
# Species matched in trait database based on fifth subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_k$binomial_IUCN))),]
# Remove species matched by fifth subspecies - do not need to try sixth collapsed subspecies
syn_l <- inner_join(SYN, trait, by = c("syn_name_sub6" = "binomial")) # uses dplyr package
# Species matched in trait database based on sixth subspecies
IUCN_more <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_l$binomial_IUCN))),]
IUCN_more_names <- as.data.frame(c(no_syn, as.vector(IUCN_more$binomial_IUCN))); names(IUCN_more_names) <- c("binomial_syn")
IUCN_more_names <- arrange(IUCN_more_names, binomial_syn) # order data A-Z - uses dplyr package
# IUCN species not listed in synonyms, i.e. species that need further matching efforts
syn_comb <- rbind(syn_a, syn_b, syn_c, syn_d, syn_e, syn_f, syn_g, syn_h, syn_i, syn_j, syn_k, syn_l); setnames(syn_comb, "binomial_IUCN", "binomial") # Combine trait data matched by synonyms and subspecies
syn_comb <- syn_comb[c(1,4:ncol(syn_comb))] # drop unneeded columns: sub_tsn and acc_tsn_e
syn_comb <- inner_join(syn_comb, trait_out, by = "binomial") # join trait data with species data for species matched by synonyms - uses dplyr package
syn_comb <- syn_comb[,!apply(syn_comb, 2, function(x) all(is.na(x)))] # remove columns of all NAs generated during inner_join
colnames(syn_comb) <- gsub(".x", "", colnames(syn_comb), fixed = TRUE) # remove .x from column names generated during inner_join
syn_names <- c("syn_name1", "syn_name_sub1", "syn_name2", "syn_name_sub2", "syn_name3", "syn_name_sub3", "syn_name4", "syn_name_sub4", "syn_name5", "syn_name_sub5", "syn_name6", "syn_name_sub6")
times <- max(match(colnames(syn_comb), syn_names), na.rm = TRUE) # how many synonym columns have been produced
trait_out[,syn_names[0:times]] <- NA # add syn_names to trait_out data frame
trait_out_temp <- trait_out[!(trait_out$binomial %in% c(as.vector(syn_comb$binomial))),]
# Remove species with NA values that have now been matched by synonyms (subspecies)
trait_out2 <- rbind(trait_out_temp, syn_comb)
# Combine matched species from synonyms with matched species from IUCN and trait database
# (nrow(trait_out) == nrow(trait_out2))
trait_out_final <- trait_out2[!(trait_out2$binomial %in% c(as.vector(trait_database$binomial))),]
# removed species listed by trait database but not listed by IUCN
# nrow = 5235
#### Outputs ####
stats <- list(
IUCN_names = IUCN_more_names, # $IUCN_names
trait_data = trait_out_final) # $trait_data
return(stats)
} # end of trait function
## read in Elton Traits 1.0 database
et <- read.csv("MamFuncDat.csv", stringsAsFactors = FALSE)
# nrow = 5400
et <- mutate(et, binomial = Scientific)
# duplicate scientific column and name it binomial to match species data
et <- arrange(et, binomial)
# order data by binomial A-Z
trait_Elton <- trait(trait = et, species = IUCN_species)
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr)
# dplyr: used to order data frames # calls: arrange
## Read in species unique lists
IUCN_species <- read.csv("ALL_Mammals_1_2_3_5_unique.csv", stringsAsFactors = FALSE)
# All mammals for presence = extant; origin = native, reintroduced, introduced, origin uncertain
# nrow = 5235
########### EltonTraits 1.0  - mammals ####################
## read in Elton Traits 1.0 database
et <- read.csv("MamFuncDat.csv", stringsAsFactors = FALSE)
# nrow = 5400
et <- mutate(et, binomial = Scientific)
# duplicate scientific column and name it binomial to match species data
et <- arrange(et, binomial)
# order data by binomial A-Z
trait_Elton <- trait(trait = et, species = IUCN_species)
## --------------------------------------------------------------
## Name: trait_function.R
## Description: Function to match IUCN species data to trait databases
## Author: R.S.C. Cooke, R.S.Cooke@soton.ac.uk
## Date: June 2016 -
## Outputs: Function named "trait"
## Options: trait = the trait data set up with the species name column identifed as binomial
##          species = the list of species to match the trait data against
## --------------------------------------------------------------
trait <- function(trait, species)
{
# Set up required packages
if (!require("pacman")) install.packages("pacman")
pacman::p_load(dplyr, taxize, data.table, rlist, stats, tidyr)
# dplyr: used to compare two data frames, create new columns and order data # calls: anti_join, full_join, inner_join, mutate, arrange
# taxize: used to find taxonomic synonyms and subspecies for taxonomic mismatches # calls: synonyms
# data.table: used to concantenate a list of data frames # calls: rbindlist
# rlist: used to remove data frames from a list of data frames # calls: list.remove
# stats: used to aggregate synonyms # calls: aggregate
# tidyr: used to separate synonyms in to two columns # calls: separate
spp <- anti_join(species, trait, by = "binomial") # uses dplyr package
# IUCN species not listed in trait database
trait_database <- anti_join(trait, species, by = "binomial") # uses dplyr package
# Species listed by trait database but not listed by IUCN
trait_out <- full_join(species, trait, by = "binomial") # uses dplyr package
## Find and try synonyms for trait data ##
spp <- spp$binomial # species list to find synonyms for: species listed by IUCN1235 but not listed by trait_outTHERIA
syn <- synonyms(spp, db = "itis") # find synonyms - uses taxize package
no_syn_na <- which(is.na(syn) == TRUE); no_syn_na <- names(no_syn_na) # list those species that have no synonym data
no_syn_col <- which(sapply(syn, NCOL) == 3); no_syn_col <- names(no_syn_col) # list those species that have data but no synonyms
no_syn <- c(no_syn_na, no_syn_col)
spp_syn <- setdiff(spp, no_syn) # remove species from species list that have no synonyms
syndf <- list.remove(syn, no_syn) # remove species data frames from synonym list that are empty - uses rlist package
SYN <- as.data.frame(data.table::rbindlist(syndf)) # collapse list of data frames for each species into new single data frame - uses data.table package
seq_bi <- sapply(syndf, nrow); seq_bi <- unlist(seq_bi) # number of rows per species
seq_bi <- rep(spp_syn, times = as.vector(seq_bi)) # repeat species names with synonyms by seq_bi
SYN <- mutate(SYN, binomial_IUCN = seq_bi)  # add sequence of species names to synonym data frame - uses dplyr package
acc_tsn_e <- suppressWarnings(ifelse(is.na(as.numeric(SYN$acc_tsn)), SYN$syn_name, SYN$acc_tsn)) # swap accepted tsn with syn names where needed - suppresses warning: "In ifelse(is.na(as.numeric(SYN$acc_tsn)), SYN$syn_name, SYN$acc_tsn) : NAs introduced by coercion"
SYN <- mutate(SYN, acc_tsn_e = acc_tsn_e) # add edited acc_tsn column to data frame - uses dplyr package
syn_name_e <- suppressWarnings(ifelse(!is.na(as.numeric(SYN$syn_name)), SYN$acc_tsn, SYN$syn_name)) # swap syn names with accepted tsn where needed - suppresses warning: "In ifelse(!is.na(as.numeric(SYN$syn_name)), SYN$acc_tsn, SYN$syn_name) : NAs introduced by coercion"
SYN <- mutate(SYN, syn_name_e = syn_name_e) # add edited syn_name column to data frame - uses dplyr package
SYN <- aggregate(SYN, by = list(SYN$binomial_IUCN), FUN = unique) # collapse species with more than one synonym into one row - uses stats package
SYN <- separate(SYN, syn_name_e, c("syn_name1", "syn_name2", "syn_name3", "syn_name4", "syn_name5", "syn_name6"), ", ", extra = "merge", fill = "right") # split multiple synonyms into separate columns - uses tidyr package
SYN$syn_name1 <- gsub("c(", "", SYN$syn_name1, fixed = TRUE) # remove leading "c(" introduced by separate
SYN$syn_name1 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name1) # remove all punctuation introduced by separate
SYN$syn_name2 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name2) # remove all punctuation introduced by separate
SYN$syn_name3 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name3) # remove all punctuation introduced by separate
SYN$syn_name4 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name4) # remove all punctuation introduced by separate
SYN$syn_name5 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name5) # remove all punctuation introduced by separate
SYN$syn_name6 <- gsub("[^[:alnum:][:space:]]", "", SYN$syn_name6) # remove all punctuation introduced by separate
SYN <- mutate(SYN, syn_name_sub1 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name1))) # add column of trinomials reduced to binomials based on first synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub2 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name2))) # add column of trinomials reduced to binomials based on second synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub3 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name3))) # add column of trinomials reduced to binomials based on third synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub4 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name4))) # add column of trinomials reduced to binomials based on fourth synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub5 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name5))) # add column of trinomials reduced to binomials based on fifth synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- mutate(SYN, syn_name_sub6 = gsub("[[:space:]]+$", "", gsub("[[:alpha:]]+$", "" , SYN$syn_name6))) # add column of trinomials reduced to binomials based on sixth synonyms - gsub removes last word of name and any spaces produced - uses dplyr package
SYN <- SYN[c(6,2,7:ncol(SYN))] # reorder columns to move binomial from the end and drop unneeded columns
## Synonyms
syn_a <- inner_join(SYN, trait, by = c("syn_name1" = "binomial")) # uses dplyr package
# Species matched in trait database based on first synonyms
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_a$binomial_IUCN))),]
# Remove species matched by first synonym - do not need to try second synonym
syn_b <- inner_join(SYN, trait, by = c("syn_name2" = "binomial")) # uses dplyr package
# Species matched in trait database based on second synonyms
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_b$binomial_IUCN))),]
# Remove species matched by second synonym - do not need to try third synonym
syn_c <- inner_join(SYN, trait, by = c("syn_name3" = "binomial")) # uses dplyr package
# Species matched in trait database based on third synonym
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_c$binomial_IUCN))),]
# Remove species matched by third synonym - do not need to try fourth synonym
syn_d <- inner_join(SYN, trait, by = c("syn_name4" = "binomial")) # uses dplyr package
# Species matched in trait database based on fourth synonym
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_d$binomial_IUCN))),]
# Remove species matched by fourth synonym - do not need to try fifth synonym
syn_e <- inner_join(SYN, trait, by = c("syn_name5" = "binomial")) # uses dplyr package
# Species matched in trait database based on fifth synonym
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_e$binomial_IUCN))),]
# Remove species matched by fifth synonym - do not need to try sixth synonym
syn_f <- inner_join(SYN, trait, by = c("syn_name6" = "binomial")) # uses dplyr package
# Species matched in trait database based on sixth synonym
## Subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_f$binomial_IUCN))),]
# Remove species matched by sixth synonym - do not need to try first collapsed (from trinomial into binomial) subspecies
syn_g <- inner_join(SYN, trait, by = c("syn_name_sub1" = "binomial")) # uses dplyr package
# Species matched in trait database based on first subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_g$binomial_IUCN))),]
# Remove species matched by first subspecies - do not need to try second collapsed subspecies
syn_h <- inner_join(SYN, trait, by = c("syn_name_sub2" = "binomial")) # uses dplyr package
# Species matched in trait database based on second subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_h$binomial_IUCN))),]
# Remove species matched by second subspecies - do not need to try third collapsed subspecies
syn_i <- inner_join(SYN, trait, by = c("syn_name_sub3" = "binomial")) # uses dplyr package
# Species matched in trait database based on third subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_i$binomial_IUCN))),]
# Remove species matched by third subspecies - do not need to try fourth collapsed subspecies
syn_j <- inner_join(SYN, trait, by = c("syn_name_sub4" = "binomial")) # uses dplyr package
# Species matched in trait database based on fourth subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_j$binomial_IUCN))),]
# Remove species matched by fourth subspecies - do not need to try fifth collapsed subspecies
syn_k <- inner_join(SYN, trait, by = c("syn_name_sub5" = "binomial")) # uses dplyr package
# Species matched in trait database based on fifth subspecies
SYN <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_k$binomial_IUCN))),]
# Remove species matched by fifth subspecies - do not need to try sixth collapsed subspecies
syn_l <- inner_join(SYN, trait, by = c("syn_name_sub6" = "binomial")) # uses dplyr package
# Species matched in trait database based on sixth subspecies
IUCN_more <- SYN[!(SYN$binomial_IUCN %in% c(as.vector(syn_l$binomial_IUCN))),]
IUCN_more_names <- as.data.frame(c(no_syn, as.vector(IUCN_more$binomial_IUCN))); names(IUCN_more_names) <- c("binomial_syn")
IUCN_more_names <- arrange(IUCN_more_names, binomial_syn) # order data A-Z - uses dplyr package
# IUCN species not listed in synonyms, i.e. species that need further matching efforts
syn_comb <- rbind(syn_a, syn_b, syn_c, syn_d, syn_e, syn_f, syn_g, syn_h, syn_i, syn_j, syn_k, syn_l); setnames(syn_comb, "binomial_IUCN", "binomial") # Combine trait data matched by synonyms and subspecies
syn_comb <- syn_comb[c(1,4:ncol(syn_comb))] # drop unneeded columns: sub_tsn and acc_tsn_e
syn_comb <- inner_join(syn_comb, trait_out, by = "binomial") # join trait data with species data for species matched by synonyms - uses dplyr package
syn_comb <- syn_comb[,!apply(syn_comb, 2, function(x) all(is.na(x)))] # remove columns of all NAs generated during inner_join
colnames(syn_comb) <- gsub(".x", "", colnames(syn_comb), fixed = TRUE) # remove .x from column names generated during inner_join
syn_names <- c("syn_name1", "syn_name_sub1", "syn_name2", "syn_name_sub2", "syn_name3", "syn_name_sub3", "syn_name4", "syn_name_sub4", "syn_name5", "syn_name_sub5", "syn_name6", "syn_name_sub6")
times <- max(match(colnames(syn_comb), syn_names), na.rm = TRUE) # how many synonym columns have been produced
trait_out[,syn_names[0:times]] <- NA # add syn_names to trait_out data frame
trait_out_temp <- trait_out[!(trait_out$binomial %in% c(as.vector(syn_comb$binomial))),]
# Remove species with NA values that have now been matched by synonyms (subspecies)
trait_out2 <- rbind(trait_out_temp, syn_comb)
# Combine matched species from synonyms with matched species from IUCN and trait database
# (nrow(trait_out) == nrow(trait_out2))
trait_out_final <- trait_out2[!(trait_out2$binomial %in% c(as.vector(trait_database$binomial))),]
# removed species listed by trait database but not listed by IUCN
# nrow = 5235
#### Outputs ####
stats <- list(
IUCN_names = IUCN_more_names, # $IUCN_names
trait_data = trait_out_final) # $trait_data
return(stats)
} # end of trait function
## read in Elton Traits 1.0 database
et <- read.csv("MamFuncDat.csv", stringsAsFactors = FALSE)
# nrow = 5400
et <- mutate(et, binomial = Scientific)
# duplicate scientific column and name it binomial to match species data
et <- arrange(et, binomial)
# order data by binomial A-Z
trait_Elton <- trait(trait = et, species = IUCN_species)
IUCN_Elton <- trait_Elton$IUCN_names # IUCN species not matched by synonyms, i.e. species that need further matching efforts
trait_data_Elton <- trait_Elton$trait_data # Trait data for all IUCN species after trying synonyms
nrow(IUCN_Elton) # Number of species not matched to trait data
# 264
nrow(trait_data_Elton) - nrow(IUCN_Elton) # Number of species matched to trait data
# 4971
(nrow(trait_data_Elton) - nrow(IUCN_Elton))/nrow(trait_data_Elton)*100 # Percent of species macthed to trait data
# 95% matched
saveRDS(trait_Elton, "trait_Elton.rds")
write.csv(IUCN_Elton, "~/R/Functional_integrity/Missing_IUCN_Elton.csv")
write.csv(trait_data_Elton, "~/R/Functional_integrity/Trait_Elton.csv")
head(trait_data_Elton)
trait_data_Elton[trait_data_Elton==-999] <- NA
apply(trait_data_Elton, 2, function(x) length(which(!is.na(x))))
trait_P <- readRDS("trait_PanTHERIA.rds")
trait_A <- readRDS("trait_Amniote.rds")
trait_E <- readRDS("trait_Elton.rds")
trait_M <- readRDS("trait_MD.rds")
big <- Reduce(function(x, y) inner_join(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
nrow(big)
big <- big[,!duplicated(colnames(big))] # remove duplicated syn_name columns produced during inner_join
taxonomic <- select(big, id_no:origin, MSW05_Genus, MSW05_Species, genus, species, Scientific, Genus, Species) # select columns id_no to origin and then taxonomic related columns
# create new column with full scientific name
taxonomic <- mutate(taxonomic, binomial_PanTHERIA = paste(MSW05_Genus, MSW05_Species, sep = " "))
taxonomic <- mutate(taxonomic, binomial_Amniote = paste(genus, species, sep = " "))
taxonomic <- mutate(taxonomic, binomial_MD = paste(Genus, Species, sep = " "))
setnames(taxonomic, "Scientific", "binomial_Elton")
taxonomic <- select(taxonomic, id_no:origin, binomial_PanTHERIA, binomial_Amniote, binomial_MD, binomial_Elton)
View(taxonomic)
body_mass <- select(big, id_no:origin, X5.1_AdultBodyMass_g, adult_body_mass_g, BodyMass.Value)
View(body_mass)
View(taxonomic)
names(body_mass) <- c("id_no", "binomial", "presence", "origin", "body_mass_PanTHERIA", "body_mass_Amniote", "body_mass_Elton")
body_mass <- mutate(body_mass, body_mass_median = rowMedians(select(body_mass, starts_with("body_mass_")), na.rm = TRUE))
pacman::p_load(dplyr, robustbase)
body_mass <- mutate(body_mass, body_mass_median = rowMedians(select(body_mass, starts_with("body_mass_")), na.rm = TRUE))
body_mass <- mutate(body_mass, body_mass_median = rowMedians(as.matrix(select(body_mass, starts_with("body_mass_"))), na.rm = TRUE))
# assign simple names to variables
trait_P <- readRDS("trait_PanTHERIA.rds")
trait_A <- readRDS("trait_Amniote.rds")
trait_E <- readRDS("trait_Elton.rds")
trait_M <- readRDS("trait_MD.rds")
big <- Reduce(function(x, y) inner_join(x, y, by = c("id_no", "binomial", "presence", "origin", "shape_Area")), list(trait_P$trait_data, trait_A$trait_data, trait_E$trait_data, trait_M$trait_data)) # merge trait data from all databases
big <- arrange(big, binomial) # order data by binomial A-Z
big <- big[,!duplicated(colnames(big))] # remove duplicated syn_name columns produced during inner_join
# nrow = 5235
### Taxonomic data frame ####
taxonomic <- select(big, id_no:origin, MSW05_Genus, MSW05_Species, genus, species, Scientific, Genus, Species) # select columns id_no to origin and then taxonomic related columns
# create data frame of taxonomic information across the databases to compare taxonomies used
# create new column with full scientific name
taxonomic <- mutate(taxonomic, binomial_PanTHERIA = paste(MSW05_Genus, MSW05_Species, sep = " "))
taxonomic <- mutate(taxonomic, binomial_Amniote = paste(genus, species, sep = " "))
taxonomic <- mutate(taxonomic, binomial_MD = paste(Genus, Species, sep = " "))
setnames(taxonomic, "Scientific", "binomial_Elton")
taxonomic <- select(taxonomic, id_no:origin, binomial_PanTHERIA, binomial_Amniote, binomial_MD, binomial_Elton)
View(taxonomic)
body_mass <- select(big, id_no:origin, X5.1_AdultBodyMass_g, adult_body_mass_g, BodyMass.Value) # create data frame of body mass data to compare across databases
names(body_mass) <- c("id_no", "binomial", "presence", "origin", "body_mass_PanTHERIA", "body_mass_Amniote", "body_mass_Elton")
body_mass[body_mass==-999] <- NA # turn -999 to NAs
body_mass <- mutate(body_mass, body_mass_median = rowMedians(as.matrix(select(body_mass, starts_with("body_mass_"))), na.rm = TRUE))
litter_size <- select(big, id_no:origin, X15.1_LitterSize, litter_or_clutch_size_n) # create data frame of litter size data to compare across databases
View(litter_size)
names(litter_size) <- c("id_no", "binomial", "presence", "origin", "litter_size_PanTHERIA", "litter_size_Amniote")
litter_size[litter_size==-999] <- NA # turn -999 to NAs
