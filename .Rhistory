install.packages("rgeos")
if(require("rgeos")){
print("rgeos installed and loaded")
} else {
stop("could not install rgeos")
}
}
##################### colorRamps ######
if(require("colorRamps")){
print("colorRamps is loaded correctly")
} else {
print("trying to install colorRamps")
install.packages("colorRamps")
if(require("colorRamps")){
print("colorRamps installed and loaded")
} else {
stop("could not install colorRamps")
}
}
lets.presab()
lets.presab
lets.presab.grid
lets.field
lets.iucn
lets.iucn.ha
lets.presab.birds
lets.presab.points
ptm <- proc.time()
for (i in 1:50) mad(stats::runif(500))
proc.time() - ptm
ptd <- proc.time() # process timer
eco <- readShapePoly("wwf_terr_ecos.shp")
proc.time() - ptd # process timer
# letsR test with Anura
##################### letsR ######
if(require("letsR")){
print("letsR is loaded correctly")
} else {
print("trying to install letsR")
install.packages("letsR")
if(require("letsR")){
print("letsR installed and loaded")
} else {
stop("could not install letsR")
}
}
##################### maptools ######
if(require("maptools")){
print("maptools is loaded correctly")
} else {
print("trying to install maptools")
install.packages("maptools")
if(require("maptools")){
print("maptools installed and loaded")
} else {
stop("could not install maptools")
}
}
##################### rgeos ######
if(require("rgeos")){
print("rgeos is loaded correctly")
} else {
print("trying to install rgeos")
install.packages("rgeos")
if(require("rgeos")){
print("rgeos installed and loaded")
} else {
stop("could not install rgeos")
}
}
##################### colorRamps ######
if(require("colorRamps")){
print("colorRamps is loaded correctly")
} else {
print("trying to install colorRamps")
install.packages("colorRamps")
if(require("colorRamps")){
print("colorRamps installed and loaded")
} else {
stop("could not install colorRamps")
}
}
eco <- readShapePoly("wwf_terr_ecos.shp") # 6.89 secs
anura <- readShapePoly("ANURA.shp", delete_null_obj = TRUE) # 32.5 secs
setwd("C:/Users/rscc1g10/Downloads/ANURA")
ptb <- proc.time() # process timer
anura <- readShapePoly("ANURA.shp", delete_null_obj = TRUE) # 32.5 secs
proc.time() - ptb # process timer
setwd("~/R/Functional_integrity")
load("~/R/Functional_integrity/pam_mam.RData")
# check working directory
getwd()
# remove all current objects in environment
rm(list=ls())
# load necessary packages: fossil, reshape2, data.table, FD, plyr
##################### fossil ######
if(require("fossil")){
print("fossil is loaded correctly")
} else {
print("trying to install fossil")
install.packages("fossil")
if(require("fossil")){
print("fossil installed and loaded")
} else {
stop("could not install fossil")
}
}
##################### reshape2 ######
if(require("reshape2")){
print("reshape2 is loaded correctly")
} else {
print("trying to install reshape2")
install.packages("reshape2")
if(require("reshape2")){
print("reshape2 installed and loaded")
} else {
stop("could not install reshape2")
}
}
##################### data.table ######
if(require("data.table")){
print("data.table is loaded correctly")
} else {
print("trying to install data.table")
install.packages("data.table")
if(require("data.table")){
print("data.table installed and loaded")
} else {
stop("could not install data.table")
}
}
##################### FD ######
if(require("FD")){
print("FD is loaded correctly")
} else {
print("trying to install FD")
install.packages("FD")
if(require("FD")){
print("FD installed and loaded")
} else {
stop("could not install FD")
}
}
##################### plyr ######
if(require("plyr")){
print("plyr is loaded correctly")
} else {
print("trying to install plyr")
install.packages("plyr")
if(require("plyr")){
print("plyr installed and loaded")
} else {
stop("could not install plyr")
}
}
##### setting up data sheets ####
#### set up SITE data ###
# read data into R:
UK_data <- read.csv("ALL_Species_Ecoregions.csv")
# check the data loaded correctly:
head(UK_data)
str(UK_data)
# sum the areas of each species per ecoregion
UK_data_sum <- as.data.table(UK_data[c(-3)])[, lapply(.SD, sum), by = list(id_no, binomial, eco_code)] # sum shape areas by species name and ecoregion
UK_data_sum <- as.data.frame(UK_data_sum) # convert data table to data frame
UK_data_sum <- with(UK_data_sum, UK_data_sum[order(binomial),]) # reorder by name of species
# list of unique species
Species <- unique(UK_data[c("id_no", "binomial")])
Species <- with(Species, Species[order(binomial),]) # reorder by name of species
# write.csv(Species, file = "Species_list.csv", row.names=FALSE) # export species list as .csv
# create speciesxsite matrix
UK_site <- create.matrix(UK_data, tax.name="binomial", locality="eco_code") # uses fossil package
UK_site <- t(UK_site) # transpose
### set up TRAITS data ##
# read data into R:
UK_trait <- read.csv("Trait_data_UK.csv", row.names = 2,
# add species names to rows
# colClasses means -999 values stay as a factor level
col.names = c("id_no","binomial","activity","mass","diet","habitat","litter","longevity","terrestriality","trophic"))
# assign simple names to variables
UK_trait$id_no <- NULL
# Turn off IUCN species id numbers (keep in data in case they become useful)
UK_trait[UK_trait==-999] <- NA
# convert -999's to NA
UK_trait$activity <- factor(UK_trait$activity) ; UK_trait$terrestriality <- factor(UK_trait$terrestriality) ; UK_trait$trophic <- factor(UK_trait$trophic)
# set activity, terrestriality and trophic level as factors
# check the data has been set up correctly:
head(UK_trait)
str(UK_trait)
########### data cleaning for NAs
species_remove <- UK_trait[!rowSums(is.na(UK_trait))<length(UK_trait),] # returns the rows that have all NAs for traits
spp_col <- unique(grep(paste(as.character(rownames(species_remove)),collapse="|"), colnames(UK_site))) # finds column numbers in site data for species with all NAs for traits
# total number of species per ecoregion (including species with missing trait data)
spp_total <- apply(UK_site, 1, sum)
# missing data species
spp_missing <- UK_site[,c(spp_col)] # matrix of missing data species per ecoregion
rowSums(spp_missing) # number of missing data species per ecoregion
# edit site data to match species in trait data
UK_site <- UK_site[,-c(spp_col)] # removes NA species from site data
UK_trait <- UK_trait[rowSums(is.na(UK_trait))<length(UK_trait),] # returns the rows that have at least one non-NA value for trait data
isTRUE(nrow(UK_trait) == ncol(UK_site))
# do the site and trait data sets contain the same number of species? - should be TRUE
# number of species per ecoregion
spp_final <- apply(UK_site, 1, sum)
# number of ecoregions assessed
e <- dim(UK_site)[1]
if (e >= 0) print(paste("number of ecoregions assessed =", e[1]))
# print number of ecoregions assessed
#UK_trait <- as.matrix(UK_trait)
############### Functional indices ##############
# combine trait and site data
UK <- list(UK_trait, UK_site) ; names(UK) <- c("trait","site")
# calculate species x species distance matrix based on effect traits
gd <- gowdis(UK$trait)
dbUK <- dbFD(UK$trait, UK$site, corr = "cailliez", m = "min") # need a m argument to get it to run
dbUK <- dbFD(UK$trait, UK$site, corr = "cailliez", calc.FRic = FALSE) # need FRic to be false to get it to run
#dbUK <- dbFD(UK$trait, UK$site, corr = "cailliez") # try running this on remote desktop
# Functional dispersion
UK_dis <- fdisp(gd, UK$site)
UK_dis$FDis
# Community-weighted means
UK_CWM <- functcomp(UK$trait, UK$site) # CWM.type = "all" if I want frequencies of each ordinal class
UK_CWM
# plot multiple dengrograms of species based on effect traits
dendro_a <- hclust(gd, method = "single")
dendro_b <- hclust(gd, method = "complete")
dendro_c <- hclust(gd, method = "ward")
dendro_d <- hclust(gd, method = "average") # UPGMA
dendro_e <- hclust(gd, method = "mcquitty") # WPGMA
dendro_f <- hclust(gd, method = "median") # WPGMC
dendro_g <- hclust(gd, method = "centroid") # UPGMC
dendro_c
cophenetic(dendro_a)
cor(co_0, co_a)
co_0 <- gd
co_a <- cophenetic(dendro_a)
cor(co_0, co_a)
co_0 <- gd
co_a <- cophenetic(dendro_a)
co_b <- cophenetic(dendro_b)
co_c <- cophenetic(dendro_c)
co_d <- cophenetic(dendro_d)
co_e <- cophenetic(dendro_e)
co_f <- cophenetic(dendro_f)
co_g <- cophenetic(dendro_g)
co_h <- cophenetic(dendro_h)
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b))
# plot multiple dengrograms of species based on effect traits
dendro_a <- hclust(gd, method = "single")
dendro_b <- hclust(gd, method = "complete")
dendro_c <- hclust(gd, method = "ward.D")
dendro_d <- hclust(gd, method = "ward.D2")
dendro_e <- hclust(gd, method = "average") # UPGMA
dendro_f <- hclust(gd, method = "mcquitty") # WPGMA
dendro_g <- hclust(gd, method = "median") # WPGMC
dendro_h <- hclust(gd, method = "centroid") # UPGMC
# co-phenetic correlations
co_0 <- gd
co_a <- cophenetic(dendro_a)
co_b <- cophenetic(dendro_b)
co_c <- cophenetic(dendro_c)
co_d <- cophenetic(dendro_d)
co_e <- cophenetic(dendro_e)
co_f <- cophenetic(dendro_f)
co_g <- cophenetic(dendro_g)
co_h <- cophenetic(dendro_h)
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b))
cophecor
# plot multiple dengrograms of species based on effect traits
dendro_a <- hclust(gd, method = "single")
dendro_b <- hclust(gd, method = "complete")
dendro_c <- hclust(gd, method = "ward.D")
dendro_d <- hclust(gd, method = "ward.D2")
dendro_e <- hclust(gd, method = "average") # UPGMA
dendro_f <- hclust(gd, method = "mcquitty") # WPGMA
dendro_g <- hclust(gd, method = "median") # WPGMC
dendro_h <- hclust(gd, method = "centroid") # UPGMC
# co-phenetic correlations
co_0 <- gd
co_a <- cophenetic(dendro_a)
co_b <- cophenetic(dendro_b)
co_c <- cophenetic(dendro_c)
co_d <- cophenetic(dendro_d)
co_e <- cophenetic(dendro_e)
co_f <- cophenetic(dendro_f)
co_g <- cophenetic(dendro_g)
co_h <- cophenetic(dendro_h)
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b),cor(co_0, co_c),cor(co_0, co_d),cor(co_0, co_e),cor(co_0, co_f),cor(co_0, co_g),cor(co_0, co_h))
cophecor
hist(cophecor)
barplot(cophecor)
barplot(order(cophecor))
order(cophecor)
sort(cophecor)
barplot(sort(cophecor, decreasing = TRUE))
table(cophecor)
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b),cor(co_0, co_c),cor(co_0, co_d),cor(co_0, co_e),cor(co_0, co_f),cor(co_0, co_g),cor(co_0, co_h))
method <- c("single","complete","ward.D","ward.D2","UPGMA","WPGMA","WPGMC","UPGMC")
data.frame(cophecor, method)
cophe <- data.frame(cophecor, method)
barplot(cophe)
barplot(cophe$cophecor)
barplot(cophe$cophecor, xlab = cophe$method)
barplot(cophe$cophecor, names.arg = cophe$method)
barplot(order(cophe$cophecor, names.arg = cophe$method))
barplot(sort(cophe$cophecor, names.arg = cophe$method))
barplot(order(cophe$cophecor), names.arg = cophe$method))
barplot(order(cophe$cophecor), names.arg = cophe$method)
sort(cophe)
sort(cophe$cophecor)
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b),cor(co_0, co_c),cor(co_0, co_d),cor(co_0, co_e),cor(co_0, co_f),cor(co_0, co_g),cor(co_0, co_h))
method <- c("single","complete","ward.D","ward.D2","UPGMA","WPGMA","WPGMC","UPGMC")
cophe <- data.frame(cophecor, method); cophe2 <- cophe[order(-cophecor),]
barplot(cophe$cophecor, names.arg = cophe$method)
cophe2
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b),cor(co_0, co_c),cor(co_0, co_d),cor(co_0, co_e),cor(co_0, co_f),cor(co_0, co_g),cor(co_0, co_h))
method <- c("single","complete","ward.D","ward.D2","UPGMA","WPGMA","WPGMC","UPGMC")
cophe <- data.frame(cophecor, method); cophe2 <- cophe[order(-cophecor),]
barplot(cophe2$cophecor, names.arg = cophe2$method)
barplot(cophe2$cophecor, names.arg = cophe2$method,
xlab = "linkage", ylab = "co-phenetic correlation coefficient")
xlab = "Linkage function", ylab = "Co-phenetic correlation coefficient")
barplot(cophe2$cophecor, names.arg = cophe2$method,
xlab = "Linkage function", ylab = "Co-phenetic correlation coefficient")
barplot(cophe2$cophecor, names.arg = cophe2$method,
xlab = "Linkage function", ylab = "Co-phenetic correlation")
# plot multiple dengrograms of species based on effect traits
dendro_a <- hclust(gd, method = "single")
dendro_b <- hclust(gd, method = "complete")
dendro_c <- hclust(gd, method = "ward.D")
dendro_d <- hclust(gd, method = "ward.D2")
dendro_e <- hclust(gd, method = "average") # UPGMA
dendro_f <- hclust(gd, method = "mcquitty") # WPGMA
# omitted UPGMC and WPGMC methods because they are not appropriate for non-metric distances (Lefcheck et al., 2014)
# co-phenetic correlations
co_0 <- gd
co_a <- cophenetic(dendro_a)
co_b <- cophenetic(dendro_b)
co_c <- cophenetic(dendro_c)
co_d <- cophenetic(dendro_d)
co_e <- cophenetic(dendro_e)
co_f <- cophenetic(dendro_f)
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b),cor(co_0, co_c),cor(co_0, co_d),cor(co_0, co_e),cor(co_0, co_f),cor(co_0, co_g),cor(co_0, co_h))
method <- c("single","complete","ward.D","ward.D2","UPGMA","WPGMA")
cophe <- data.frame(cophecor, method)
cophe2 <- cophe[order(-cophecor),]
barplot(cophe2$cophecor, names.arg = cophe2$method,
xlab = "Linkage function", ylab = "Co-phenetic correlation")
cophecor <- c(cor(co_0, co_a),cor(co_0, co_b),cor(co_0, co_c),cor(co_0, co_d),cor(co_0, co_e),cor(co_0, co_f))
method <- c("single","complete","ward.D","ward.D2","UPGMA","WPGMA")
cophe <- data.frame(cophecor, method)
cophe2 <- cophe[order(-cophecor),]
barplot(cophe2$cophecor, names.arg = cophe2$method,
xlab = "Linkage function", ylab = "Co-phenetic correlation")
##################### clue ######
if(require("clue")){
print("clue is loaded correctly")
} else {
print("trying to install clue")
install.packages("clue")
if(require("clue")){
print("clue installed and loaded")
} else {
stop("could not install clue")
}
}
hclust_methods <-
c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty")
hclust_results <- lapply(hclust_methods, function(m) hclust(gd, m))
names(hclust_results) <- hclust_methods
hclust_results
plot(hclust_results$ward.D)
dendro_con <- cl_consensus(list = hclust_results)
dendro_con <- cl_consensus(hclust_results)
dendro_con
plot(dendro_con)
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
co_cor
hclust_methods
cophenetic(hclust_results$ward.D)
cophenetic(dendro_con)
cophecor2 <- lapply(co_cor, function(m) cor(co_0, m))
cophecor2
hist(cophecor2)
# plot multiple dengrograms of species based on effect traits
hclust_methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty")
# average = UPGMA, mcquitty = WPGMA
# omitted UPGMC and WPGMC methods because they are not appropriate for non-metric distances (Lefcheck et al., 2014)
hclust_results <- lapply(hclust_methods, function(m) hclust(gd, m))
names(hclust_results) <- hclust_methods
plot(hclust_results$ward.D)
dendro_con <- cl_consensus(hclust_results)
plot(dendro_con)
# co-phenetic correlations
co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
cophecor <- lapply(co_cor, function(m) cor(co_0, m))
all_hclust <- c(hclust_results, dendro_con)
all_hclust
all_hclust <- c(hclust_results, consensus = "dendro_con")
dendro_con <- cl_consensus(hclust_results)
all_hclust <- c(hclust_results, consensus = dendro_con)
# plot multiple dengrograms of species based on effect traits
hclust_methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty")
# average = UPGMA, mcquitty = WPGMA
# omitted UPGMC and WPGMC methods because they are not appropriate for non-metric distances (Lefcheck et al., 2014)
hclust_results <- lapply(hclust_methods, function(m) hclust(gd, m))
names(hclust_results) <- hclust_methods
plot(hclust_results$ward.D)
dendro_con <- cl_consensus(hclust_results)
all_hclust <- c(hclust_results, consensus = dendro_con)
co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
cophecor <- lapply(co_cor, function(m) cor(co_0, m))
cophecor
# co-phenetic correlations
co_0 <- gd
co_cor <- lapply(all_hclust, function(m) cophenetic(m))
cophecor <- lapply(co_cor, function(m) cor(co_0, m))
# plot multiple dengrograms of species based on effect traits
hclust_methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty")
# average = UPGMA, mcquitty = WPGMA
# omitted UPGMC and WPGMC methods because they are not appropriate for non-metric distances (Lefcheck et al., 2014)
hclust_results <- lapply(hclust_methods, function(m) hclust(gd, m))
names(hclust_results) <- hclust_methods
plot(hclust_results$ward.D)
dendro_con <- cl_consensus(hclust_results)
plot(dendro_con)
# co-phenetic correlations
co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
cophecor <- lapply(co_cor, function(m) cor(co_0, m))
cophecor
con <- cophenetic(dendro_con)
cor(co_0, con)
# plot multiple dengrograms of species based on effect traits
hclust_methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty")
# average = UPGMA, mcquitty = WPGMA
# omitted UPGMC and WPGMC methods because they are not appropriate for non-metric distances (Lefcheck et al., 2014)
hclust_results <- lapply(hclust_methods, function(m) hclust(gd, m))
names(hclust_results) <- hclust_methods
plot(hclust_results$ward.D)
dendro_con <- cl_consensus(hclust_results)
plot(dendro_con)
# co-phenetic correlations
co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
cpc <- lapply(co_cor, function(m) cor(co_0, m))
# add consensus method
consensus <- cophenetic(dendro_con)
cor(co_0, consensus)
all_cpc <- c(cpc, consensus = consensus)
all_coc
all_cpc
# co-phenetic correlations
co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
cpc <- lapply(co_cor, function(m) cor(co_0, m))
# add consensus method
con_cophe <- cophenetic(dendro_con)
cor_con <- cor(co_0, con_cophe)
all_cpc <- c(cpc, consensus = cor_con)
all_cpc
all_cpc2 <- all_cpc[order(-value),]
all_cpc2 <- all_cpc[order(unlist(all_cpc), decreasing = TRUE)]
all_cpc2
barplot(unlist(all_cpc2),
xlab = "Linkage function", ylab = "Co-phenetic correlation")
all_cpc[1,]
all_cpc[1]
all_cpc2[1]
t <- all_cpc2[1]
t
hclust_results[t,]
hclust_results[t]
hclust_results[,t]
unlist(all_cpc2[1]) # already ordered by correlation
t <- unlist(all_cpc2[1])
t
t(name)
lapply(hclust_results, function(x) x[x %in% unlist(all_cpc2[1]),])
lapply(hclust_results, function(x) x %in% unlist(all_cpc2[1]))
all_cpc2
all_cpc2[1]
t <- all_cpc2[1] # already ordered by correlation
lapply(hclust_results, function(x) x %in% t)
hclust_results
hclust_results[[average]]
hclust_results[["average"]]
lapply(hclust_results, function(x) x[[t]])
lapply(hclust_results, function(x) x[["average"]])
x <- c("average")
lapply(hclust_results, function(x) hclust_results[[x]])
hclust_results[[x]]
names(t)
t <- all_cpc2[1] # already ordered by correlation
x <- names(t)
best_dendro <- hclust_results[[x]])
t <- all_cpc2[1] # already ordered by correlation
x <- names(t)
best_dendro <- hclust_results[[x]]
best_dendro
plot(best_dendro)
t <- all_cpc2[1] # already ordered by correlation
x <- names(t)
plot(hclust_results[[x]], main = "Cluster dengrogram based on effect traits", cex = 0.8)
plot(hclust_results[[x]], main = "Functional dengrogram based on effect traits with the highest co-phenetic correlation", cex = 0.8)
plot(hclust_results[[x]], main = "Functional dengrogram based on effect traits /n with the highest co-phenetic correlation", cex = 0.8)
plot(hclust_results[[x]], main = "Functional dengrogram based on effect traits" /n "with the highest co-phenetic correlation", cex = 0.8)
plot(hclust_results[[x]], main = "Functional dengrogram based on effect traits \n with the highest co-phenetic correlation", cex = 0.8)
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", cex = 0.8)
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
