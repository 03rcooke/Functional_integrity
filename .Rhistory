co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
cpc <- lapply(co_cor, function(m) cor(co_0, m))
# add consensus method
con_cophe <- cophenetic(dendro_con)
cor_con <- cor(co_0, con_cophe)
all_cpc <- c(cpc, consensus = cor_con)
all_cpc2 <- all_cpc[order(unlist(all_cpc), decreasing = TRUE)]
barplot(unlist(all_cpc2), xlab = "Linkage function", ylab = "Co-phenetic correlation")
t <- all_cpc2[1] # already ordered by correlation
x <- "consensus"
hclust_results[[x]]
all_cpc2
t <- all_cpc2[5] # already ordered by correlation
x <- names(t)
x
hclust_results[[x]]
hclust_results[[x]] == NULL
is.null(hclust_results[[x]])
if (is.null(hclust_results[[x]])){
plot(dendro_con, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
} else {
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
}
plot(dendro_con)
t <- all_cpc2[3] # already ordered by correlation
x <- names(t)
if (is.null(hclust_results[[x]])){
plot(dendro_con, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
} else {
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
}
# dendrogram with highest co-phenetic correlation
# NEED TO ADD IF LOOP TO CHECK IF ITS THE CONSENSUS DENDROGRAM
t <- all_cpc2[3] # already ordered by correlation
x <- names(t)
if (is.null(hclust_results[[x]])){
plot(dendro_con, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = consensus", cex = 0.8)
} else {
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
}
t <- all_cpc2[1] # already ordered by correlation
x <- names(t)
if (is.null(hclust_results[[x]])){
plot(dendro_con, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = consensus", cex = 0.8)
} else {
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
}
ultra <- lapply(hclust_results, function(m) cl_ultrametric(m))
ultra
plot(uktra)
plot(ultra)
u <- cl_ultrametric(dendro_con)
plot(u)
co_cor <- lapply(c(hclust_results, dendro_con), function(m) cophenetic(m))
c(hclust_results, dendro_con)
con_ultra <- cl_ultrametric(dendro_con)
ud <- lapply(ultra, function(x) cl_dissimilarity(x, gd, method = "spectral"))
ud <- lapply(ultra, function(x) cl_dissimilarity(x, method = "spectral"))
ud
u <- cl_dissimilarity(ultra$ward.D, method = "spectral")
u
u <- cl_dissimilarity(ultra$ward.D, gd, method = "spectral")
u
gd <- gowdis(UK$trait, ord = c("podani"))
######### Plot multiple dengrograms of species based on effect traits #########
hclust_methods <- c("ward.D", "ward.D2", "single", "complete", "average", "mcquitty")
# average = UPGMA, mcquitty = WPGMA
# omitted UPGMC and WPGMC methods because they are not appropriate
# for non-metric distances (Lefcheck et al., 2014)
hclust_results <- lapply(hclust_methods, function(m) hclust(gd, m))
names(hclust_results) <- hclust_methods
dendro_con <- cl_consensus(hclust_results)
######## Testing the performance of different clustering algorithms
######### co-phenetic correlations (Kreft & Jetz, 2010) ###############
co_0 <- gd
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
# cophenetic function - stats package
cpc <- lapply(co_cor, function(m) cor(co_0, m))
# add consensus method
con_cophe <- cophenetic(dendro_con)
cor_con <- cor(co_0, con_cophe)
all_cpc <- c(cpc, consensus = cor_con)
all_cpc2 <- all_cpc[order(unlist(all_cpc), decreasing = TRUE)]
barplot(unlist(all_cpc2), xlab = "Linkage function", ylab = "Co-phenetic correlation")
# dendrogram with highest co-phenetic correlation
t <- all_cpc2[1] # already ordered by correlation
x <- names(t)
if (is.null(hclust_results[[x]])){
plot(dendro_con, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = consensus", cex = 0.8)
} else {
plot(hclust_results[[x]], main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
}
con_ultra <- cl_ultrametric(dendro_con, gd, method = "spectral")
con_ultra <- cl_dissimilarity(dendro_con, gd, method = "spectral")
ultra <- lapply(hclust_results, function(m) cl_ultrametric(m))
# ultrametric function - clue package
ud <- lapply(ultra, function(x) cl_dissimilarity(x, gd, method = "spectral"))
# add consensus method
con_ultra <- cl_dissimilarity(dendro_con, gd, method = "spectral")
ud <- lapply(hclust_results, function(m) cl_ultrametric(m))
# ultrametric function - clue package
ultra <- lapply(ud, function(x) cl_dissimilarity(x, gd, method = "spectral"))
# add consensus method
con_ultra <- cl_dissimilarity(dendro_con, gd, method = "spectral")
ultra
con_ultra
all_ultra <- c(ud, consensus = con_ultra)
all_ultra
ud <- lapply(hclust_results, function(m) cl_ultrametric(m))
# ultrametric function - clue package
ultra <- lapply(ud, function(x) cl_dissimilarity(x, gd, method = "spectral"))
# add consensus method
con_ultra <- cl_dissimilarity(dendro_con, gd, method = "spectral")
all_ultra <- c(ultra, consensus = con_ultra)
all_ultra
co_cor <- lapply(hclust_results, function(m), cl_dissimilarity(m, gd, method = "cophenetic"))
co_cor <- lapply(hclust_results, function(m) cl_dissimilarity(m, gd, method = "cophenetic"))
co_cor
co_cor <- lapply(hclust_results, function(m) cophenetic(m))
co_cor2 <- lapply(hclust_results, function(m) cl_dissimilarity(m, gd, method = "cophenetic"))
# cophenetic
co_cor
co_cor2
all_ultra2 <- all_ultra[order(unlist(all_ultra), decreasing = FALSE)]
all_ultra2
barplot(unlist(all_ultra2), xlab = "Linkage function", ylab = "The spectral norm (2-norm) of the differences of the ultrametrics")
barplot(unlist(all_ultra2), xlab = "Linkage function", ylab = "The spectral norm (2-norm) dissimilarities compared to the orginal distances")
barplot(unlist(1/all_ultra2), xlab = "Linkage function", ylab = "The spectral norm (2-norm) dissimilarities compared to the orginal distances")
unlist(all_ultra2$average)
1/unlist(all_ultra2$average)
barplot(1/unlist(all_ultra2), xlab = "Linkage function", ylab = "The spectral norm (2-norm) dissimilarities compared to the orginal distances")
barplot(1/unlist(all_ultra2), xlab = "Linkage function", ylab = "1/2-norm dissimilarities")
barplot(1/unlist(all_ultra2), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
all_ultra2[[1]]
barplot(1/unlist(all_ultra2), ylim = 1/unlist(all_ultra2[[1]]), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
1/unlist(all_ultra2[[1]])
barplot(1/unlist(all_ultra2), ylim = (1/unlist(all_ultra2[[1]])), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = 0.4, xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = 0.4, xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = 10, xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,10), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,1/unlist(all_ultra2[[1]])), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
ceiling(1/unlist(all_ultra2[[1]]))
barplot(1/unlist(all_ultra2), ylim = c(0,ceiling(1/unlist(all_ultra2[[1]]))), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,signif(1/unlist(all_ultra2[[1]]), 2)), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,(1/unlist(all_ultra2[[1]])), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,(1/unlist(all_ultra2[[1]])+0.1*1/unlist(all_ultra2[[1]])), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,(1/unlist(all_ultra2[[1]])+0.1*1/unlist(all_ultra2[[1]]))), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
barplot(1/unlist(all_ultra2), ylim = c(0,(1/unlist(all_ultra2[[1]])+0.1*1/unlist(all_ultra2[[1]]))), xlab = "Linkage function", ylab = "1/spectral norm (2-norm) dissimilarities")
0.1*1/unlist(all_ultra2[[1]])
barplot(unlist(all_cpc2), xlab = "Linkage function", ylab = "Co-phenetic correlation")
barplot(unlist(all_cpc2), ylim = (0,unlist(all_cpc2)), xlab = "Linkage function", ylab = "Co-phenetic correlation")
barplot(unlist(all_cpc2), ylim = c(0,unlist(all_cpc2)), xlab = "Linkage function", ylab = "Co-phenetic correlation")
unlist(all_cpc2)
barplot(unlist(all_cpc2), ylim = c(0,unlist(all_cpc2[[1]])), xlab = "Linkage function", ylab = "Co-phenetic correlation")
barplot(unlist(all_cpc2), ylim = c(0,(unlist(all_cpc2[[1]])+0.1*unlist(all_cpc2[[1]]))), xlab = "Linkage function", ylab = "Co-phenetic correlation")
unlist(all_cpc2[[1]])
0.1*unlist(all_cpc2[[1]])
(unlist(all_cpc2[[1]])+0.1*unlist(all_cpc2[[1]]))
barplot(unlist(all_cpc2), ylim = c(0,(unlist(all_cpc2[[1]])+0.2*unlist(all_cpc2[[1]]))), xlab = "Linkage function", ylab = "Co-phenetic correlation")
# dendrogram with lowest 2-norm value
u <- all_ultra2[1] # already ordered
v <- names(u)
if (is.null(hclust_results[[v]])){
plot(dendro_con, main = "Functional dengrogram (based on effect traits) \n with the lowest (2-norm) dissimilarity", xlab = "method = consensus", cex = 0.8)
} else {
plot(hclust_results[[v]], main = "Functional dengrogram (based on effect traits) \n with the lowest (2-norm) dissimilarity", xlab = "method = ", cex = 0.8)
}
library(pvclust)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(fossil, reshape2, data.table, FD, plyr, clue, pvclust)
library(pvclust)
install.packages("pvclust")
library(pvclust)
fit <- pvclust(gd, method.hclust="ward.D2")
fit <- pvclust(UK$trait, method.hclust="ward.D2", method.dist = gowdis)
scale(UK$trait)
View(UK$trait)
fit <- pvclust(UK$trait, method.hclust="average", method.dist = gowdis)
UK$trait
fit <- pvclust(UK$trait, method.hclust="ward.D2", method.dist = gowdis)
install.packages("cluster")
install.packages("cluster")
library(cluster)
labels=2, lines=0)
clusplot(UK$trait, hclust_results[[v]], color=TRUE, shade=TRUE,
labels=2, lines=0)
labels=2, lines=0)
clusplot(UK$trait, hclust_results$average, color=TRUE, shade=TRUE,
labels=2, lines=0)
# dendrogram with lowest 2-norm value
u <- all_ultra2[1] # already ordered
v <- names(u)
if (is.null(hclust_results[[v]])){
plot(dendro_con, hang = -1, main = "Functional dengrogram (based on effect traits) \n with the lowest (2-norm) dissimilarity", xlab = "method = consensus", cex = 0.8)
} else {
plot(hclust_results[[v]], hang = -1, main = "Functional dengrogram (based on effect traits) \n with the lowest (2-norm) dissimilarity", xlab = "method = ", cex = 0.8)
}
# dendrogram with highest co-phenetic correlation
t <- all_cpc2[1] # already ordered by correlation
x <- names(t)
if (is.null(hclust_results[[x]])){
plot(dendro_con, hang = -1, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = consensus", cex = 0.8)
} else {
plot(hclust_results[[x]], hang = -1, main = "Functional dengrogram (based on effect traits) \n with the highest co-phenetic correlation", xlab = "method = ", cex = 0.8)
}
library(ggplot2)
df     <- data.frame(iris)                   # iris dataset
pca    <- prcomp(df[,1:4], retx=T, scale.=T) # scaled pca [exclude species col]
scores <- pca$x[,1:3]                        # scores for first three PC's
# k-means clustering [assume 3 clusters]
km     <- kmeans(scores, centers=3, nstart=5)
ggdata <- data.frame(scores, Cluster=km$cluster, Species=df$Species)
# stat_ellipse is not part of the base ggplot package
source("https://raw.github.com/low-decarie/FAAV/master/r/stat-ellipse.R")
ggplot(ggdata) +
geom_point(aes(x=PC1, y=PC2, color=factor(Cluster)), size=5, shape=20) +
stat_ellipse(aes(x=PC1,y=PC2,fill=factor(Cluster)),
geom="polygon", level=0.95, alpha=0.2) +
guides(color=guide_legend("Cluster"),fill=guide_legend("Cluster"))
km$cluster
install.packages("NbClust")
library(NbClust)
plot(hclust_results$average)
egroup <- cutree(dendro, h = 0.2)
egroup <- cutree(hclust_results$average, h = 0.2)
egroup
length(unique(egroup))
hclust_results$average
dendro_test <- as.dendrogram(hclust_results$average)
dendro_test
dendro_test$height
str(hclust_results$average)
hclust_results$average$height
hclust_results[[1]]$height
mer <- sort(hclust_results[[1]]$height)
mer
mer <- order(hclust_results[[1]]$height)
mer
mer <- sort(hclust_results[[1]]$height, decreasing = TRUE)
mer
length(hclust_results[[1]]$height)
mer2 <- c(mer, 2:length(hclust_results[[1]]$height))
mer2
mer2 <- data.frame(mer, 2:length(hclust_results[[1]]$height))
mer2 <- data.frame(mer, 2:(length(hclust_results[[1]]$height)+1))
mer2
hclust_results$average
names(mer2) <- c("merh","k")
mer2
with(mer2, plot(k, merh))
plot(mer2$k, mer2$merh, xlab = "Number of clusters", ylab = "Merging height")
mer <- sort(hclust_results[[1]]$height, decreasing = TRUE)
# merge heights of clusters
mer2 <- data.frame(mer, 2:(length(hclust_results[[1]]$height)+1))
# combine merge heights and number of clusters
names(mer2) <- c("h","k")
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
mer2
lc <- lm(mer2$h ~ mer2$k)
abline(lc)
lc <- lm(h ~ k, data = mer2)
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
abline(lc)
lc <- lm(h ~ k, data = mer2, subset = 2:10)
rc <- lm(h ~ k, data = mer2, subset = 3:length(k))
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
abline(lc)
abline(rc)
lc <- lm(h ~ k, data = mer2, subset = 2:4)
rc <- lm(h ~ k, data = mer2, subset = 3:length(k))
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
abline(lc)
abline(rc)
lc <- lm(h ~ k, data = mer2, subset = 3:4)
rc <- lm(h ~ k, data = mer2, subset = 3:length(k))
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
abline(lc)
abline(rc)
lc <- lm(h ~ k, data = mer2, subset = 1:4)
rc <- lm(h ~ k, data = mer2, subset = 3:length(k))
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
abline(lc)
abline(rc)
mer2$k[1]
length(mer2$k)
mer2
lc <- lm(h ~ k, data = mer2, subset = 1:2)
rc <- lm(h ~ k, data = mer2, subset = 3:length(k))
plot(mer2$k, mer2$h, xlab = "Number of clusters", ylab = "Merging height", main = "Evalution plot")
abline(lc)
abline(rc)
install.packages("qpcR")
library(qpcR)
RMSE(lc)
RMSE(rc)
b <- max(mer2$k)
b
b-1
length(mer2)
length(mer2$h)
b <- max(mer2$k)
c <- 6
xl = 2:c
xr = c+1:b
xl
xr
b <- max(mer2$k)
# c <- interate from 3 to b-3
xl = 2:c
xr = (c+1):b
xr
b <- max(mer2$k)
b
b-1
xl
xl = 2:c
xl
1:xl
mer2$k[2]
b-2
mer2$k[40]
mer2$k[b]
mer2$k[b-1]
b
b <- max(mer2$k) # n = b-1, 41 in this case
# c <- interate from 3 to b-2
xl = 2:c
xr = (c+1):b-1
xl
xr
c+1
b <- max(mer2$k) # n = b-1, 41 in this case
# c <- interate from 3 to b-2
xl = 2:c
xr = c+1:b-1
xr
c
b <- max(mer2$k) # n = b-1, 41 in this case
# c <- interate from 3 to b-2
xl = 2:c
xr = (c+1):(b-1)
xr
b
mer2$h[42]
mer2$h[41]
mer2$h[40]
b <- max(mer2$k) # n = b-1, 41 in this case
# c <- interate from 3 to b-3
xl = 2:c
xr = (c+1):(b-2)
xl
xr
b-1
mer2$h[]
mer2$h[40]
mer2$h[41]
mer2$h[42]
n <- 14
l <- rep(list(0:1), n)
l
month <- rep(1:12, 5)
int_inc <- cumprod(ifelse(month == 5, 1.03, 1))
int_inc
seq(from = 2, to b-3, by = 1)
seq(from = 2, to = b-3, by = 1)
b <- max(mer2$k) # n = b-1, 41 in this case
c <- seq(from = 3, to = b-3, by = 1)
xl = seq(from = 2, to = c, by = 1)
xl <- lapply(c, function(x) seq(from = 2, to = x, by = 1))
xl
xl <- lapply(c, function(c) seq(from = 2, to = c, by = 1))
xl
xr <- lapply(c, function(c) seq(from = (c+1), to = (b-2), by = 1))
xr
b <- max(mer2$k) # n = b-1, 41 in this case
c <- seq(from = 2, to = b-3, by = 1)
xr = (c+1):(b-2)
xl <- lapply(c, function(c) seq(from = 2, to = c, by = 1))
xr <- lapply(c, function(c) seq(from = (c+1), to = (b-1), by = 1))
xl
xr
View(xl)
xl <- lapply(c, function(c) seq(from = min(c), to = max(c), by = 1))
xl
mer2
mer2 <- data.frame(mer, 1:(length(hclust_results[[1]]$height)+1))
mer2 <- data.frame(mer, 1:(length(hclust_results[[1]]$height)))
mer2
mer2 <- data.frame(mer, 2:(length(hclust_results[[1]]$height)+1))
mer2
c(0, mer)
mer2 <- data.frame(c(0, mer), 1:(length(hclust_results[[1]]$height)+1))
mer2
mer2 <- data.frame(c(NA, mer), 1:(length(hclust_results[[1]]$height)+1))
mer2
names(mer2) <- c("h","k")
mer2
b <- max(mer2$k) # n = b-1, 41 in this case
b
xl <- lapply(c, function(c) seq(from = min(c), to = max(c), by = 1))
xl
c <- seq(from = 3, to = b-2, by = 1)
xl <- lapply(c, function(c) seq(from = min(c), to = max(c), by = 1))
xl
xr <- lapply(c, function(c) seq(from = (min(c+1)), to = max((c+1)), by = 1))
xr
xl+1
rep(xl+1)
rep(xl+1, 38)
)
lc <- lapply(xl, function(x) do.call("lm",list(h ~ k, quote(mer2), subset = 2:xl)))
lc <- lapply(xl, function(x) do.call("lm",list(h ~ k, quote(mer2), subset = x)))
lc
lc <- lapply(xl, function(x) do.call("lm",list(h ~ k, quote(mer2), subset = 2:x)))
lc
lc <- lapply(xl, function(xl) do.call("lm",list(h ~ k, quote(mer2), subset = 2:xl)))
lc <- lapply(xl, function(xl) do.call("lm",list(h ~ k, data = quote(mer2), subset = 2:xl)))
lc <- lapply(xl, function(xl) do.call("lm",list(h ~ k, data = mer2, subset = 2:xl)))
lc
lc <- lapply(xl, function(xl) do.call("lm",list(h ~ k, data = quote(mer2), subset = 2:xl)))
lc
rc <- lapply(xr, function(xr) do.call("lm",list(h ~ k, data = quote(mer2), subset = xr:b)))
rc
RMSE(lc)
RMSEl <- lapply(lc, function(lc) RMSE(lc))
RMSEl
RMSEr <- lapply(rc, function(rc) RMSE(rc))
RMSEr
RMSEc <- c-1/b-1*RMSEl + b-c/b-1*RMSEr
RMSEl <- lapply(lc, function(lc) c-1/b-1*RMSE(lc))
RMSEl
RMSEl <- lapply(lc, function(lc) RMSE(lc))
data.frame(RMSEl, RMSEr)
test <- data.frame(RMSEl, RMSEr)
View(test)
test <- matrix(RMSEl, RMSEr)
test <- c(RMSEl, RMSEr)
test
table(RMSEl, RMSEr)
test <- data.frame(unlist(RMSEl), unlist(RMSEr))
test
rmse <- data.frame(unlist(RMSEl, RMSEr))
rmse
rmse <- data.frame(unlist(RMSEl), unlist(RMSEr))
rmse
View(rmse)
rmse <- data.frame(unlist(RMSEl), unlist(RMSEr)); names(rmse) <- c("RMSEl", "RMSEr")
View(rmse)
rmse <- matrix(unlist(RMSEl), unlist(RMSEr)); names(rmse) <- c("RMSEl", "RMSEr")
rmse <- matrix(unlist(RMSEl), unlist(RMSEr))
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = c("RMSEl","RMSEr"))
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = list(NA, c("RMSEl","RMSEr")))
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = list(rep(row, length(RMSEl), c("RMSEl","RMSEr"))))
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = list(rep("row", length(RMSEl), c("RMSEl","RMSEr"))))
rmsem
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = list(rep("row"), c("RMSEl","RMSEr"))))
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = list(rep("row"), c("RMSEl","RMSEr")))
rmsem <- matrix(nrow=length(RMSEl), ncol=2, dimnames = list(rep("row", length(RMSEl)), c("RMSEl","RMSEr")))
rmsem
rmsem[cbind(RMSEl, RMSEr)]
rmsem[cbind(unlist(RMSEl), unlist(RMSEr))]
rmsem
rmse <- data.frame(unlist(RMSEl), unlist(RMSEr)); names(rmse) <- c("RMSEl", "RMSEr")
rmsed <- data.frame(unlist(RMSEl), unlist(RMSEr)); names(rmse) <- c("RMSEl", "RMSEr")
rmsed
rmsed <- data.frame(unlist(RMSEl), unlist(RMSEr)); names(rmse) <- c("RMSEl", "RMSEr")
rmsed
rmsed <- data.frame(unlist(RMSEl), unlist(RMSEr)); names(rmsed) <- c("RMSEl", "RMSEr")
rmsed
rmsed <- data.frame(unlist(RMSEl), unlist(RMSEr)); names(rmsed) <- c("RMSEl", "RMSEr")
rmsed
rowsums(rmsed)
rowSums(rmsed)
apply(rmsed, 1, sum)
rownames(rmsed)
apply(rmsed, 1, as.numeric(rownames)-1)
c
rmsed <- data.frame(unlist(RMSEl), unlist(RMSEr), c); names(rmsed) <- c("RMSEl", "RMSEr", "c")
rmsed
rsmed[,2]
rmsed[,2]
rmsed$RMSEl
with(rmsed, lapply(RMSEl, function(X) c-1/b-1*X)
)
lapply(rmsed$RMSEl, function(X) rmsed$c-1/b-1*X)
lapply(rmsed[1,], function(X) rmsed$c-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl[1,], function(X) rmsed$c-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl[1], function(X) rmsed$c-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl, function(X) rmsed$c-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl[1], function(X) rmsed$c-1/b-1*rmsed$RMSEl)
install.packages("AICcmodavg")
library(AICcmodavg)
AICc
lapply(rmsed$RMSEl[1], function(X) rmsed$c-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl[1], function(X) rmsed$c[1]-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl[1], function(X) rmsed$c[1]-1/b-1*rmsed$RMSEl)
lapply(rmsed$RMSEl[1], function(X) rmsed$c-1/b-1*rmsed$RMSEl[1])
rmsed$c[1]-1/b-1*RMSEl[1]
(rmsed$c[1]-1)/(b-1)*RMSEl[1]
(rmsed$c[1]-1)
(b-1)
RMSEl[1]
(rmsed$c[2]-1)/(b-1)*RMSEl[2]
RMSEl[2]
rmsed$RMSEl[2]
(rmsed$c[2]-1)/(b-1)*rmsed$RMSEl[2]
rmsed$c[2]-1/b-1*rmsed$RMSEl[2]
(rmsed$c[2]-1)/b-1*rmsed$RMSEl[2]
(rmsed$c[2]-1)/(b-1)*rmsed$RMSEl[2]
View(rmsed)
