## Not run:
bp <- matrix(0, 6, 6)
bp[2,5] <- 0.5
bp[5,2] <- 0.8
bp[2,1] <- bp[3,2] <- bp[5,4] <- bp[6,5] <- 0.5
stdev <- rep(0.025, 6)
## Use R/qtl routines to simulate map and genotypes.
set.seed(34567899)
mymap <- sim.map(len = rep(100,20), n.mar = 10, eq.spacing = FALSE,
include.x = FALSE)
mycross <- sim.cross(map = mymap, n.ind = 200, type = "f2")
mycross <- sim.geno(mycross, n.draws = 1)
## Use R/qdg routines to produce QTL sample and generate phenotypes.
cyclicc.qtl <- generate.qtl.markers(cross = mycross, n.phe = 6)
mygeno <- pull.geno(mycross)[, unlist(cyclicc.qtl$markers)]
cyclicc.data <- generate.qtl.pheno("cyclicc", cross = mycross, burnin = 2000,
bq = c(0.2,0.3,0.4), bp = bp, stdev = stdev, geno = mygeno)
save(cyclicc.qtl, cyclicc.data, file = "cyclicc.RData", compress = TRUE)
## End(Not run)
data(cyclicc)
out <- qdg(cross=cyclicc.data,
phenotype.names=paste("y",1:6,sep=""),
marker.names=cyclicc.qtl$markers,
QTL=cyclicc.qtl$allqtl,
alpha=0.005,
n.qdg.random.starts=1,
skel.method="pcskel")
gr <- graph.qdg(out)
plot(gr)
remove.packages("qtlnet", lib="~/R/win-library/3.2")
plot(qnorm) # default range c(0, 1) is appropriate here,
# but end values are -/+Inf and so are omitted.
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
par(op)
quit()
plot(qnorm) # default range c(0, 1) is appropriate here,
plot(qlogis, main = "The Inverse Logit : qlogis()")
abline(h = 0, v = 0:2/2, lty = 3, col = "gray")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
curve(sin, -2*pi, 2*pi, xname = "t")
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time")
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance")
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance")
par(new = TRUE)
curve(tan, xname = "t", add = NA,
main = "curve(tan)  --> same x-scale as previous plot")
curve(x^3 - 3*x, -2, 2)
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance")
curve(tan, xname = "t", add = TRUE)
curve(x^3 - 3*x, -2, 2, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance")
curve(tan, xname = "t", add = TRUE)
curve(x^3 - 3*x, -2, 2, add = TRUE)
curve(x^2 - 2, add = TRUE)
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance")
curve(tan, xname = "t", add = TRUE)
curve(x^3 - 3*x, -2, 2, add = TRUE)
curve(x^2 - 2, add = TRUE)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance")
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", labels = FALSE)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(cos*1.1, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", labels = FALSE)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(cos, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", labels = FALSE)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", labels = FALSE)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(tan, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", labels = FALSE)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(x^1, add = TRUE)
curve(x^1, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n")
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", cex.axis = 2)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-pi, 3*pi), col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-pi, 3*pi), col = "blue", add = TRUE)
curve(cos, xlim = c(-3*pi, pi), add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-pi, 3*pi), col = "blue", add = TRUE)
curve(cos, xlim = c(-3*pi, pi*3), add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-pi, 3*pi), col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(-cos, xlim = c(-3*pi, pi*3), add = TRUE)
op <- par(mfrow = c(2, 2))
curve(x^3 - 3*x, -2, 2)
curve(x^2 - 2, add = TRUE, col = "violet")
## simple and advanced versions, quite similar:
plot(cos, -pi,  3*pi)
curve(cos, xlim = c(-pi, 3*pi), n = 1001, col = "blue", add = TRUE)
chippy <- function(x) sin(cos(x)*exp(-x/2))
curve(chippy, -8, 7, n = 2001)
plot (chippy, -8, -5)
for(ll in c("", "x", "y", "xy"))
curve(log(1+x), 1, 100, log = ll, sub = paste0("log = '", ll, "'"))
par(op)
curve(tan, xname = "t", add = TRUE)
curve(x^3 - 3*x, -2, 2, add = TRUE)
curve(x^2 - 2, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(-cos, xlim = c(-3*pi, pi*3), add = TRUE)
curve(tan, xname = "t", add = TRUE)
curve(x^3 - 3*x, -2, 2, add = TRUE)
curve(x^2 - 2, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(acos, xlim = c(-3*pi, pi*3), add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sinpi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(tanpi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(asin, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sinpi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(asin, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cos(pi*x), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sinpi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(asin, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cos(pi*2x), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sinpi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cospi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sinpi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x^3), xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
curve(cos(pi*x^10), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cospi, xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(sinpi, xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x+0.1), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x+0.8, xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x^3), xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "red", add = TRUE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n")
curve(cos(pi*x^3), xlim = c(-3*pi, pi*3), col = "orange", add = TRUE)
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "blue", add = TRUE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x^3), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "blue", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+5), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+8), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "Time", ylab = "Abundance", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+28), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(sin, -2*pi, 2*pi, xname = "t", xlab = "", ylab = "", xaxt = "n", yaxt = "n")
curve(cos, xlim = c(-3*pi, 3*pi), col = "blue", add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+28), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x^3), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cos(pi*x+1), xlim = c(-3*pi, pi*3), col = "blue", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+18), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+21), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+25), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2, frame.plot = FALSE)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, ann = FALSE)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2, frame.plot = FALSE, labels = FALSE)
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
curve(cos(pi*x+0.5), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+0.8), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
curve(cos(pi*x+15), xlim = c(-3*pi, pi*3), col = "red", lwd = 2, add = TRUE)
curve(cos(pi*x+36), xlim = c(-3*pi, pi*3), col = "orange", lwd = 2, add = TRUE)
curve(cospi, xlim = c(-3*pi, pi*3), col = "blue", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", xaxt = "n", yaxt = "n", lwd = 2)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
abline(h = 0.95*max(ylim))
abline(h = 0.95*max(yrange))
abline(h = 0.95*max(y))
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE) #, labels = FALSE)
abline(h = 0.95*max(y))
abline(h = 0.95)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE) #, labels = FALSE)
abline(h = 0.90)
ablien(n = -0.1)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE) #, labels = FALSE)
abline(h = 0.90)
abline(h = -0.1)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE) #, labels = FALSE)
abline(h = 0.9)
abline(h = -0.9)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE) #, labels = FALSE)
abline(h = 0.9, lty = 2)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
abline(h = 0.9, lty = 2)
abline(h = -0.9, lty = 2)
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
abline(h = 0.9, lty = 2, col = "grey")
abline(h = -0.9, lty = 2, col = "grey")
curve(cos(pi*x^2), xlim = c(-3*pi, pi*3), col = "red", xlab = "", ylab = "", lwd = 2, frame.plot = FALSE, labels = FALSE)
abline(h = 0.9, lty = 2, lwd = 2, col = "grey")
abline(h = -0.9, lty = 2, lwd = 2, col = "grey")
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names=TRUE)
read_csv <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret
}
eco1 <- ldply(csv_files, read_csv)
csv_files
read_csv()
read_csv
getwd()
setwd("~/ArcGIS/PhD/Ecoregion_CSVs")
csv1 <- read.csv("AA0101_M.csv")
csv1
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = FALSE)
csv_files
read_csv <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
eco1 <- ldply(csv_files, read_csv)
eco1 <- ldply(csv1, read_csv)
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
csv1 <- read.csv("AA0101_M.csv", header = FALSE)
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
# function to
eco1 <- ldply(csv_files, read_csv_file)
csv_files
csv_files[1]
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
csv1 <- read.csv("AA0101_M.csv", header = FALSE)
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
# function to add filename to new column named eco_code for each csv
eco1 <- ldply(csv_files[1], read_csv_file)
eco1
eco1 <- ldply(csv_files[1:2], read_csv_file)
eco1
eco1 <- ldply(csv_files[1:3], read_csv_file)
eco1 <- ldply(csv_files[1:4], read_csv_file)
eco1 <- ldply(csv_files[1:5], read_csv_file)
eco1 <- ldply(csv_files[1:6], read_csv_file)
eco1 <- ldply(csv_files[1:7], read_csv_file)
eco1 <- ldply(csv_files[1:8], read_csv_file)
eco1 <- ldply(csv_files[1:9], read_csv_file)
eco1 <- ldply(csv_files[1:10], read_csv_file)
eco1 <- ldply(csv_files[1:20], read_csv_file)
cvs
s
csv_files
eco1 <- ldply(csv_files[1:40], read_csv_file)
eco1 <- ldply(csv_files[1:100], read_csv_file)
eco1 <- ldply(csv_files[1:60], read_csv_file)
eco1 <- ldply(csv_files[1:80], read_csv_file)
eco1 <- ldply(csv_files[1:90], read_csv_file)
eco1 <- ldply(csv_files[1:82], read_csv_file)
eco1 <- ldply(csv_files[1:84], read_csv_file)
eco1 <- ldply(csv_files[1:83], read_csv_file)
eco1 <- ldply(csv_files[1:82], read_csv_file)
csv_files
eco1 <- ldply(csv_files[84:85], read_csv_file)
empty_files <- csv_files[which(file.info(csv_files)$size>0)]
empty_files
empty_files <- csv_files[which(file.info(csv_files)$size<0)]
empty_files
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)]
empty_files
empty_files <- lapply(Filter(function(x) countLines(x)==0, csv_files), unlink)
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr, R.utils)
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)]
empty_files <- lapply(Filter(function(x) countLines(x)==0, csv_files), unlink)
empty_files
empty_files <- lapply(Filter(function(x) countLines(x)<=1, csv_files), unlink)
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)]
empty_files <- lapply(Filter(function(x) countLines(x)<=1, csv_files), unlink)
empty_files
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr, R.utils)
# plyr: used to combine csvs # calls: ldply
# R.utils: used to identify empty csvs (no species within ecoregion) # calls: countLines
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)]
empty_files
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr, R.utils)
# plyr: used to combine csvs # calls: ldply
# R.utils: used to identify empty csvs (no species within ecoregion) # calls: countLines
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)]
empty_files
csv_files
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
# plyr: used to combine csvs # calls: ldply
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)] # identify
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
# function to add filename to new column named eco_code for each csv
eco1 <- ldply(csv_files, read_csv_file)
eco1
View(eco1)
eco1$eco_code <- basename(eco1$eco_code) # remove path name from ecoregion csv files
eco1$eco_code <- gsub("_M.csv", "", eco1$eco_code) # remove _M.csv from end of ecoregion csv files path
View(eco1)
eco1 <- eco1[-c(1:2)] # drop geographic coordinates
# Rename columns with shorter, lower case names
names(eco1) <- c("OBJECTid", "id_no", "binomial", "presence", "origin", "seasonal", "compiler", "year", "citation", "source", "dist_comm", "island", "subspecies", "subpop", "legend", "tax_comm", "kingdom_na", "phylum_nam", "class_name", "order_name", "family_nam", "genus_name", "species_na", "code", "shape_Leng", "Shape_Length", "Shape_Area", "eco_code")
View(eco1)
View(eco1)
eco1 <- eco1[-c(29:30)]
View(eco1)
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
# plyr: used to combine csvs # calls: ldply
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)] # identify
# function to add filename to new column named eco_code for each csv
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
eco1 <- ldply(csv_files, read_csv_file)
eco1$eco_code <- basename(eco1$eco_code) # remove path name from ecoregion csv files
eco1$eco_code <- gsub("_M.csv", "", eco1$eco_code) # remove _M.csv from end of ecoregion csv files path
eco1 <- eco1[-c(1:2,29:30)] # drop geographic coordinates and empty columns
# Rename columns with shorter, lower case names
names(eco1) <- c("OBJECTid", "id_no", "binomial", "presence", "origin", "seasonal", "compiler", "year", "citation", "source", "dist_comm", "island", "subspecies", "subpop", "legend", "tax_comm", "kingdom_na", "phylum_nam", "class_name", "order_name", "family_nam", "genus_name", "species_na", "code", "shape_Leng", "Shape_Length", "Shape_Area", "eco_code")
View(eco1)
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
# plyr: used to combine csvs # calls: ldply
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)] # identify
# function to add filename to new column named eco_code for each csv
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
eco1 <- ldply(csv_files, read_csv_file)
eco1$eco_code <- basename(eco1$eco_code) # remove path name from ecoregion csv files
eco1$eco_code <- gsub("_M.csv", "", eco1$eco_code) # remove _M.csv from end of ecoregion csv files path
eco1 <- eco1[-c(1:2)] # drop geographic coordinates and empty columns
# Rename columns with shorter, lower case names
names(eco1) <- c("OBJECTid", "id_no", "binomial", "presence", "origin", "seasonal", "compiler", "year", "citation", "source", "dist_comm", "island", "subspecies", "subpop", "legend", "tax_comm", "kingdom_na", "phylum_nam", "class_name", "order_name", "family_nam", "genus_name", "species_na", "code", "shape_Leng", "Shape_Length", "Shape_Area", "eco_code")
View(eco1)
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
# plyr: used to combine csvs # calls: ldply
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)] # identify
# function to add filename to new column named eco_code for each csv
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
eco1 <- ldply(csv_files, read_csv_file)
eco1$eco_code <- basename(eco1$eco_code) # remove path name from ecoregion csv files
eco1$eco_code <- gsub("_M.csv", "", eco1$eco_code) # remove _M.csv from end of ecoregion csv files path
eco1 <- eco1[-c(1:2)] # drop geographic coordinates
View(eco1)
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
# plyr: used to combine csvs # calls: ldply
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)] # identify
# function to add filename to new column named eco_code for each csv
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
eco1 <- ldply(csv_files, read_csv_file)
eco1$eco_code <- basename(eco1$eco_code) # remove path name from ecoregion csv files
eco1$eco_code <- gsub("_M.csv", "", eco1$eco_code) # remove _M.csv from end of ecoregion csv files path
eco1 <- eco1[-c(1:2,30:31)] # drop geographic coordinates and empty columns
View(eco1)
### Combine mammal data from each ecoregion
if (!require("pacman")) install.packages("pacman")
pacman::p_load(plyr)
# plyr: used to combine csvs # calls: ldply
csv_files <- dir(path = "~/ArcGIS/PhD/Ecoregion_CSVs", pattern = "csv$", full.names = TRUE)
empty_files <- csv_files[which(file.info(csv_files)$size<0.1)] # identify
# function to add filename to new column named eco_code for each csv
read_csv_file <- function(filename){
ret <- read.csv(filename, header = FALSE)
ret$eco_code <- filename
ret}
eco1 <- ldply(csv_files, read_csv_file)
eco1$eco_code <- basename(eco1$eco_code) # remove path name from ecoregion csv files
eco1$eco_code <- gsub("_M.csv", "", eco1$eco_code) # remove _M.csv from end of ecoregion csv files path
eco1 <- eco1[-c(1:2,31:32)] # drop geographic coordinates and empty columns
View(eco1)
# Rename columns with shorter, lower case names
names(eco1) <- c("OBJECTid", "id_no", "binomial", "presence", "origin", "seasonal", "compiler", "year", "citation", "source", "dist_comm", "island", "subspecies", "subpop", "legend", "tax_comm", "kingdom_na", "phylum_nam", "class_name", "order_name", "family_nam", "genus_name", "species_na", "code", "shape_Leng", "Shape_Length", "Shape_Area", "eco_code")
View(eco1)
